<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\PplRcd.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\PplRcd.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Tue Mar 20 17:26:48 2018
<BR><P>
<H3>Maximum Stack Usage =        320 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
MdlChn_run &rArr; Signal_Alarm &rArr; MdlChn_Check_new_alarm &rArr; STG_Set_file_position &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4c]">rt_alloc_box</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4c]">rt_alloc_box</a><BR>
 <LI><a href="#[7]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">NMI_Handler</a><BR>
 <LI><a href="#[9]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">MemManage_Handler</a><BR>
 <LI><a href="#[a]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">BusFault_Handler</a><BR>
 <LI><a href="#[b]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">UsageFault_Handler</a><BR>
 <LI><a href="#[d]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">DebugMon_Handler</a><BR>
 <LI><a href="#[22]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[fe]">Except_raise</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[fe]">Except_raise</a><BR>
 <LI><a href="#[18c]">Strg_Updata_rcd_mgr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[80]">STG_Open_file</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[22]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a]">BusFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6b]">Ch376_intr</a> from ch376.o(i.Ch376_intr) referenced from ch376.o(i.Init_Ch376)
 <LI><a href="#[63]">Close_devSpi</a> from dev_spi.o(i.Close_devSpi) referenced from dev_spi.o(i.Dev_spi_ctor)
 <LI><a href="#[51]">Close_dev_IIC</a> from dev_iic.o(i.Close_dev_IIC) referenced from dev_iic.o(i.Dev_IIC_ctor)
 <LI><a href="#[1b]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel2_IRQHandler</a> from drive_uart.o(i.DMA1_Channel2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel4_IRQHandler</a> from drive_uart.o(i.DMA1_Channel4_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1f]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">DMA1_Channel7_IRQHandler</a> from drive_uart.o(i.DMA1_Channel7_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[49]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4a]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4b]">DMA2_Channel4_5_IRQHandler</a> from drive_uart.o(i.DMA2_Channel4_5_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[81]">Deal_status</a> from usb.o(i.Deal_status) referenced from usb.o(i.USB_Init)
 <LI><a href="#[d]">DebugMon_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[85]">DevGpioClose</a> from device_gpio.o(i.DevGpioClose) referenced from device_gpio.o(i.devGpio_ctor)
 <LI><a href="#[88]">DevGpioIoctol</a> from device_gpio.o(i.DevGpioIoctol) referenced from device_gpio.o(i.devGpio_ctor)
 <LI><a href="#[84]">DevGpioOpen</a> from device_gpio.o(i.DevGpioOpen) referenced from device_gpio.o(i.devGpio_ctor)
 <LI><a href="#[86]">DevGpioRead</a> from device_gpio.o(i.DevGpioRead) referenced from device_gpio.o(i.devGpio_ctor)
 <LI><a href="#[89]">DevGpioTest</a> from device_gpio.o(i.DevGpioTest) referenced from device_gpio.o(i.devGpio_ctor)
 <LI><a href="#[87]">DevGpioWrite</a> from device_gpio.o(i.DevGpioWrite) referenced from device_gpio.o(i.devGpio_ctor)
 <LI><a href="#[57]">Dev_Uart_close</a> from dev_uart.o(i.Dev_Uart_close) referenced from dev_uart.o(i.Dev_Uart_ctor)
 <LI><a href="#[5a]">Dev_Uart_ioctol</a> from dev_uart.o(i.Dev_Uart_ioctol) referenced from dev_uart.o(i.Dev_Uart_ctor)
 <LI><a href="#[56]">Dev_Uart_open</a> from dev_uart.o(i.Dev_Uart_open) referenced from dev_uart.o(i.Dev_Uart_ctor)
 <LI><a href="#[58]">Dev_Uart_read</a> from dev_uart.o(i.Dev_Uart_read) referenced from dev_uart.o(i.Dev_Uart_ctor)
 <LI><a href="#[5b]">Dev_Uart_test</a> from dev_uart.o(i.Dev_Uart_test) referenced from dev_uart.o(i.Dev_Uart_ctor)
 <LI><a href="#[59]">Dev_Uart_write</a> from dev_uart.o(i.Dev_Uart_write) referenced from dev_uart.o(i.Dev_Uart_ctor)
 <LI><a href="#[6c]">DoUpdate</a> from model.o(i.DoUpdate) referenced from model.o(i.Mdl_notify)
 <LI><a href="#[16]">EXTI0_IRQHandler</a> from drive_gpio.o(i.EXTI0_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">EXTI15_10_IRQHandler</a> from drive_gpio.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">EXTI1_IRQHandler</a> from drive_gpio.o(i.EXTI1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">EXTI2_IRQHandler</a> from drive_gpio.o(i.EXTI2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">EXTI3_IRQHandler</a> from drive_gpio.o(i.EXTI3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">EXTI4_IRQHandler</a> from drive_gpio.o(i.EXTI4_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">EXTI9_5_IRQHandler</a> from drive_gpio.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[14]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[9f]">FM_Clear</a> from dev_lcd_fm12864.o(i.FM_Clear) referenced from dev_lcd_fm12864.o(i.lcd_fm12864_ctor)
 <LI><a href="#[6a]">FM_Draw_cycle</a> from dev_lcd_fm12864.o(i.FM_Draw_cycle) referenced from dev_lcd_fm12864.o(i.FM_Init)
 <LI><a href="#[a5]">FM_Draw_geometry</a> from dev_lcd_fm12864.o(i.FM_Draw_geometry) referenced from dev_lcd_fm12864.o(i.lcd_fm12864_ctor)
 <LI><a href="#[68]">FM_Draw_line</a> from dev_lcd_fm12864.o(i.FM_Draw_line) referenced from dev_lcd_fm12864.o(i.FM_Init)
 <LI><a href="#[69]">FM_Draw_rectangle</a> from dev_lcd_fm12864.o(i.FM_Draw_rectangle) referenced from dev_lcd_fm12864.o(i.FM_Init)
 <LI><a href="#[a2]">FM_Flush</a> from dev_lcd_fm12864.o(i.FM_Flush) referenced from dev_lcd_fm12864.o(i.lcd_fm12864_ctor)
 <LI><a href="#[9e]">FM_Init</a> from dev_lcd_fm12864.o(i.FM_Init) referenced from dev_lcd_fm12864.o(i.lcd_fm12864_ctor)
 <LI><a href="#[a4]">FM_Lcd_ctl</a> from dev_lcd_fm12864.o(i.FM_Lcd_ctl) referenced from dev_lcd_fm12864.o(i.lcd_fm12864_ctor)
 <LI><a href="#[a3]">FM_Lightness</a> from dev_lcd_fm12864.o(i.FM_Lightness) referenced from dev_lcd_fm12864.o(i.lcd_fm12864_ctor)
 <LI><a href="#[a0]">FM_Switch</a> from dev_lcd_fm12864.o(i.FM_Switch) referenced from dev_lcd_fm12864.o(i.lcd_fm12864_ctor)
 <LI><a href="#[a1]">FM_Text</a> from dev_lcd_fm12864.o(i.FM_Text) referenced from dev_lcd_fm12864.o(i.lcd_fm12864_ctor)
 <LI><a href="#[40]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8b]">GpioDeInit</a> from drive_gpio.o(i.GpioDeInit) referenced from drive_gpio.o(i.driveGpio_ctor)
 <LI><a href="#[8a]">GpioInit</a> from drive_gpio.o(i.GpioInit) referenced from drive_gpio.o(i.driveGpio_ctor)
 <LI><a href="#[8c]">GpioRead</a> from drive_gpio.o(i.GpioRead) referenced from drive_gpio.o(i.driveGpio_ctor)
 <LI><a href="#[8f]">GpioSetEncode</a> from drive_gpio.o(i.GpioSetEncode) referenced from drive_gpio.o(i.driveGpio_ctor)
 <LI><a href="#[8e]">GpioSetIrqHdl</a> from drive_gpio.o(i.GpioSetIrqHdl) referenced from drive_gpio.o(i.driveGpio_ctor)
 <LI><a href="#[91]">GpioTest</a> from drive_gpio.o(i.GpioTest) referenced from drive_gpio.o(i.driveGpio_ctor)
 <LI><a href="#[8d]">GpioWrite</a> from drive_gpio.o(i.GpioWrite) referenced from drive_gpio.o(i.driveGpio_ctor)
 <LI><a href="#[90]">Gpio_control_irq</a> from drive_gpio.o(i.Gpio_control_irq) referenced from drive_gpio.o(i.driveGpio_ctor)
 <LI><a href="#[8]">HardFault_Handler</a> from main.o(i.HardFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[66]">Ioctol_devSpi</a> from dev_spi.o(i.Ioctol_devSpi) referenced from dev_spi.o(i.Dev_spi_ctor)
 <LI><a href="#[54]">Ioctol_dev_IIC</a> from dev_iic.o(i.Ioctol_dev_IIC) referenced from dev_iic.o(i.Dev_IIC_ctor)
 <LI><a href="#[70]">MdlChn_getData</a> from model_channel.o(i.MdlChn_getData) referenced from model_channel.o(i.Model_chn_ctor)
 <LI><a href="#[6d]">MdlChn_init</a> from model_channel.o(i.MdlChn_init) referenced from model_channel.o(i.Model_chn_ctor)
 <LI><a href="#[74]">MdlChn_modify_sconf</a> from model_channel.o(i.MdlChn_modify_sconf) referenced from model_channel.o(i.Model_chn_ctor)
 <LI><a href="#[6e]">MdlChn_run</a> from model_channel.o(i.MdlChn_run) referenced from model_channel.o(i.Model_chn_ctor)
 <LI><a href="#[6f]">MdlChn_self_check</a> from model_channel.o(i.MdlChn_self_check) referenced from model_channel.o(i.Model_chn_ctor)
 <LI><a href="#[71]">MdlChn_setData</a> from model_channel.o(i.MdlChn_setData) referenced from model_channel.o(i.Model_chn_ctor)
 <LI><a href="#[75]">MdlChn_set_by_string</a> from model_channel.o(i.MdlChn_set_by_string) referenced from model_channel.o(i.Model_chn_ctor)
 <LI><a href="#[73]">MdlChn_to_percentage</a> from model_channel.o(i.MdlChn_to_percentage) referenced from model_channel.o(i.Model_chn_ctor)
 <LI><a href="#[72]">MdlChn_to_string</a> from model_channel.o(i.MdlChn_to_string) referenced from model_channel.o(i.Model_chn_ctor)
 <LI><a href="#[7a]">Mdl_addTmMdl</a> from model.o(i.Mdl_addTmMdl) referenced from model.o(i.Model_ctor)
 <LI><a href="#[76]">Mdl_attach</a> from model.o(i.Mdl_attach) referenced from model.o(i.Model_ctor)
 <LI><a href="#[7b]">Mdl_delTmMdl</a> from model.o(i.Mdl_delTmMdl) referenced from model.o(i.Model_ctor)
 <LI><a href="#[77]">Mdl_detach</a> from model.o(i.Mdl_detach) referenced from model.o(i.Model_ctor)
 <LI><a href="#[78]">Mdl_getData</a> from model.o(i.Mdl_getData) referenced from model.o(i.Model_ctor)
 <LI><a href="#[7c]">Mdl_notify</a> from model.o(i.Mdl_notify) referenced from model.o(i.Model_ctor)
 <LI><a href="#[79]">Mdl_setData</a> from model.o(i.Mdl_setData) referenced from model.o(i.Model_ctor)
 <LI><a href="#[9]">MemManage_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7]">NMI_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[62]">Open_devSpi</a> from dev_spi.o(i.Open_devSpi) referenced from dev_spi.o(i.Dev_spi_ctor)
 <LI><a href="#[50]">Open_dev_IIC</a> from dev_iic.o(i.Open_dev_IIC) referenced from dev_iic.o(i.Dev_IIC_ctor)
 <LI><a href="#[11]">PVD_IRQHandler</a> from power.o(i.PVD_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e]">PendSV_Handler</a> from hal_cm3.o(.emb_text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[15]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[64]">Read_devSpi</a> from dev_spi.o(i.Read_devSpi) referenced from dev_spi.o(i.Dev_spi_ctor)
 <LI><a href="#[52]">Read_dev_IIC</a> from dev_iic.o(i.Read_dev_IIC) referenced from dev_iic.o(i.Dev_IIC_ctor)
 <LI><a href="#[6]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">SPI1_IRQHandler</a> from drive_spi.o(i.SPI1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">SPI2_IRQHandler</a> from drive_spi.o(i.SPI2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[80]">STG_Open_file</a> from storage.o(i.STG_Open_file) referenced from storage.o(i.Storage_ctor)
 <LI><a href="#[c]">SVC_Handler</a> from hal_cm3.o(.emb_text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7f]">Strg_WR_stored_data</a> from storage.o(i.Strg_WR_stored_data) referenced from storage.o(i.Storage_ctor)
 <LI><a href="#[7d]">Strg_init</a> from storage.o(i.Strg_init) referenced from storage.o(i.Storage_ctor)
 <LI><a href="#[7e]">Strg_rd_stored_data</a> from storage.o(i.Strg_rd_stored_data) referenced from storage.o(i.Storage_ctor)
 <LI><a href="#[f]">SysTick_Handler</a> from hal_cm3.o(.emb_text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4e]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[12]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">TIM2_IRQHandler</a> from times.o(i.TIM2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">TIM3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">TIM4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[46]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[67]">Test_devSpi</a> from dev_spi.o(i.Test_devSpi) referenced from dev_spi.o(i.Dev_spi_ctor)
 <LI><a href="#[55]">Test_dev_IIC</a> from dev_iic.o(i.Test_dev_IIC) referenced from dev_iic.o(i.Dev_IIC_ctor)
 <LI><a href="#[44]">UART4_IRQHandler</a> from drive_uart.o(i.UART4_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">USART1_IRQHandler</a> from drive_uart.o(i.USART1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">USART2_IRQHandler</a> from drive_uart.o(i.USART2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">USART3_IRQHandler</a> from drive_uart.o(i.USART3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[93]">UartDeInit</a> from drive_uart.o(i.UartDeInit) referenced from drive_uart.o(i.driveUart_ctor)
 <LI><a href="#[96]">UartGiveBackPlayloadBuf</a> from drive_uart.o(i.UartGiveBackPlayloadBuf) referenced from drive_uart.o(i.driveUart_ctor)
 <LI><a href="#[92]">UartInit</a> from drive_uart.o(i.UartInit) referenced from drive_uart.o(i.driveUart_ctor)
 <LI><a href="#[98]">UartIoctol</a> from drive_uart.o(i.UartIoctol) referenced from drive_uart.o(i.driveUart_ctor)
 <LI><a href="#[60]">UartLedRxHdl</a> from dev_uart.o(i.UartLedRxHdl) referenced from dev_uart.o(i.Dev_Uart_open)
 <LI><a href="#[61]">UartLedTxHdl</a> from dev_uart.o(i.UartLedTxHdl) referenced from dev_uart.o(i.Dev_Uart_open)
 <LI><a href="#[5e]">UartPostRxSem</a> from dev_uart.o(i.UartPostRxSem) referenced from dev_uart.o(i.Dev_Uart_open)
 <LI><a href="#[5f]">UartPostTxSem</a> from dev_uart.o(i.UartPostTxSem) referenced from dev_uart.o(i.Dev_Uart_open)
 <LI><a href="#[94]">UartRead</a> from drive_uart.o(i.UartRead) referenced from drive_uart.o(i.driveUart_ctor)
 <LI><a href="#[9a]">UartSetIdp</a> from drive_uart.o(i.UartSetIdp) referenced from drive_uart.o(i.driveUart_ctor)
 <LI><a href="#[99]">UartSetLedHdl</a> from drive_uart.o(i.UartSetLedHdl) referenced from drive_uart.o(i.driveUart_ctor)
 <LI><a href="#[9c]">UartSetPostSem</a> from drive_uart.o(i.UartSetPostSem) referenced from drive_uart.o(i.driveUart_ctor)
 <LI><a href="#[9b]">UartSetWaitSem</a> from drive_uart.o(i.UartSetWaitSem) referenced from drive_uart.o(i.driveUart_ctor)
 <LI><a href="#[95]">UartTakeUpPlayloadBuf</a> from drive_uart.o(i.UartTakeUpPlayloadBuf) referenced from drive_uart.o(i.driveUart_ctor)
 <LI><a href="#[9d]">UartTest</a> from drive_uart.o(i.UartTest) referenced from drive_uart.o(i.driveUart_ctor)
 <LI><a href="#[5c]">UartWaitRxSem</a> from dev_uart.o(i.UartWaitRxSem) referenced from dev_uart.o(i.Dev_Uart_open)
 <LI><a href="#[5d]">UartWaitTxSem</a> from dev_uart.o(i.UartWaitTxSem) referenced from dev_uart.o(i.Dev_Uart_open)
 <LI><a href="#[97]">UartWrite</a> from drive_uart.o(i.UartWrite) referenced from drive_uart.o(i.driveUart_ctor)
 <LI><a href="#[b]">UsageFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4]">Usb_deal_fail</a> from usb.o(i.Usb_deal_fail) referenced 2 times from usb.o(.data)
 <LI><a href="#[5]">Usb_deal_identify</a> from usb.o(i.Usb_deal_identify) referenced 2 times from usb.o(.data)
 <LI><a href="#[2]">Usb_deal_insert</a> from usb.o(i.Usb_deal_insert) referenced 2 times from usb.o(.data)
 <LI><a href="#[3]">Usb_deal_remove</a> from usb.o(i.Usb_deal_remove) referenced 2 times from usb.o(.data)
 <LI><a href="#[10]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[65]">Write_devSpi</a> from dev_spi.o(i.Write_devSpi) referenced from dev_spi.o(i.Dev_spi_ctor)
 <LI><a href="#[53]">Write_dev_IIC</a> from dev_iic.o(i.Write_dev_IIC) referenced from dev_iic.o(i.Dev_IIC_ctor)
 <LI><a href="#[4f]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[83]">_sputc</a> from printf8.o(i._sputc) referenced from printf8.o(i.__0sprintf$8)
 <LI><a href="#[82]">fputc</a> from main.o(i.fputc) referenced from printf8.o(i.__0fprintf$8)
 <LI><a href="#[b4]">main</a> from main.o(i.main) referenced from rtx_conf_cm.o(.constdata)
 <LI><a href="#[b2]">osThreadExit</a> from rt_cmsis.o(i.osThreadExit) referenced from rt_cmsis.o(i.svcThreadCreate)
 <LI><a href="#[b3]">osTimerThread</a> from rt_cmsis.o(i.osTimerThread) referenced from rtx_conf_cm.o(.constdata)
 <LI><a href="#[b1]">os_idle_demon</a> from rtx_conf_cm.o(i.os_idle_demon) referenced from rt_task.o(i.rt_sys_init)
 <LI><a href="#[4c]">rt_alloc_box</a> from rt_membox.o(i.rt_alloc_box) referenced from hal_cm3.o(.emb_text)
 <LI><a href="#[4d]">rt_free_box</a> from rt_membox.o(i.rt_free_box) referenced from hal_cm3.o(.emb_text)
 <LI><a href="#[a6]">svcDelay</a> from rt_cmsis.o(i.svcDelay) referenced from rt_cmsis.o(i.osDelay)
 <LI><a href="#[a7]">svcKernelInitialize</a> from rt_cmsis.o(i.svcKernelInitialize) referenced from rt_cmsis.o(i.osKernelInitialize)
 <LI><a href="#[a8]">svcKernelStart</a> from rt_cmsis.o(i.svcKernelStart) referenced from rt_cmsis.o(i.osKernelStart)
 <LI><a href="#[a9]">svcMessageGet</a> from rt_cmsis.o(i.svcMessageGet) referenced from rt_cmsis.o(i.osMessageGet)
 <LI><a href="#[aa]">svcSemaphoreCreate</a> from rt_cmsis.o(i.svcSemaphoreCreate) referenced from rt_cmsis.o(i.osSemaphoreCreate)
 <LI><a href="#[ab]">svcSemaphoreRelease</a> from rt_cmsis.o(i.svcSemaphoreRelease) referenced from rt_cmsis.o(i.osSemaphoreRelease)
 <LI><a href="#[ac]">svcSemaphoreWait</a> from rt_cmsis.o(i.svcSemaphoreWait) referenced from rt_cmsis.o(i.osSemaphoreWait)
 <LI><a href="#[ad]">svcThreadCreate</a> from rt_cmsis.o(i.svcThreadCreate) referenced from rt_cmsis.o(i.osThreadCreate)
 <LI><a href="#[ae]">svcThreadGetId</a> from rt_cmsis.o(i.svcThreadGetId) referenced from rt_cmsis.o(i.osThreadExit)
 <LI><a href="#[af]">svcThreadTerminate</a> from rt_cmsis.o(i.svcThreadTerminate) referenced from rt_cmsis.o(i.osThreadExit)
 <LI><a href="#[b0]">svcTimerCall</a> from rt_cmsis.o(i.svcTimerCall) referenced from rt_cmsis.o(i.osTimerCall)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4f]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[20c]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[b5]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[c8]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[20d]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[20e]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[20f]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[210]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[b7]"></a>_main_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtx_conf_cm.o(.ARM.Collect$$$$000000FF))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _main_init &rArr; osKernelInitialize &rArr; svcKernelInitialize &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[211]"></a>rt_set_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[1ff]"></a>rt_get_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>

<P><STRONG><a name="[212]"></a>os_set_env</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[213]"></a>_alloc_box</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[214]"></a>_free_box</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[c]"></a>SVC_Handler</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>PendSV_Handler</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = PendSV_Handler &rArr; rt_pop_req &rArr; rt_mbx_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SysTick_Handler &rArr; rt_systick &rArr; sysTimerTick &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[be]"></a>OS_Tick_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_irqack
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[6]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c0]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[da]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWrite
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRead
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHD_Get_code
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdl_setData
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdl_getData
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>

<P><STRONG><a name="[215]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[216]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Clear
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[217]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[218]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_playloadbuf
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRead
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_default_conf
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_default_alarm
</UL>

<P><STRONG><a name="[101]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Clear
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usb_deal_insert
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_setData
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_self_check
</UL>

<P><STRONG><a name="[219]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[c5]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[167]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_to_string
</UL>

<P><STRONG><a name="[1ba]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTest
</UL>

<P><STRONG><a name="[17c]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_unit
</UL>

<P><STRONG><a name="[17b]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTest
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_float
</UL>

<P><STRONG><a name="[1b9]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTest
</UL>

<P><STRONG><a name="[c6]"></a>calloc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, calloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = calloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_calloc
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
</UL>

<P><STRONG><a name="[21a]"></a>setjmp</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, setjmp.o(.text), UNUSED)

<P><STRONG><a name="[100]"></a>longjmp</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, setjmp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Except_raise
</UL>

<P><STRONG><a name="[c2]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[21b]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[c1]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[21c]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[b6]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[21d]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[21e]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[21f]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[c9]"></a>Alloc_sem</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rtx_depend.o(i.Alloc_sem))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Alloc_sem &rArr; Set_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_bit
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DevUart
</UL>

<P><STRONG><a name="[cc]"></a>CH376DiskMount</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ch376.o(i.CH376DiskMount))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CH376DiskMount &rArr; CH376SendCmdWaitInt &rArr; Wait376Interrupt &rArr; CH376GetIntStatus &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376SendCmdWaitInt
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usb_deal_insert
</UL>

<P><STRONG><a name="[ce]"></a>CH376DiskQuery</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, ch376.o(i.CH376DiskQuery))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CH376DiskQuery &rArr; CH376SendCmdWaitInt &rArr; Wait376Interrupt &rArr; CH376GetIntStatus &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH376Cmd
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376SendCmdWaitInt
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usb_deal_identify
</UL>

<P><STRONG><a name="[d4]"></a>CH376ReadBlock</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ch376.o(i.CH376ReadBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CH376ReadBlock &rArr; xWriteCH376Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH376Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usb_deal_insert
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDiskWriteProtect
</UL>

<P><STRONG><a name="[d9]"></a>CHD_Get_code</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, character_database.o(i.CHD_Get_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CHD_Get_code
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Text
</UL>

<P><STRONG><a name="[1ad]"></a>CQ_Init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cycqueue.o(i.CQ_Init))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
</UL>

<P><STRONG><a name="[dc]"></a>CQ_Len</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cycqueue.o(i.CQ_Len))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CQ_Write
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CQ_Read
</UL>

<P><STRONG><a name="[db]"></a>CQ_Read</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, cycqueue.o(i.CQ_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CQ_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CQ_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Run
</UL>

<P><STRONG><a name="[dd]"></a>CQ_Write</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, cycqueue.o(i.CQ_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CQ_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CQ_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usb_deal_remove
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usb_deal_insert
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usb_deal_identify
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deal_status
</UL>

<P><STRONG><a name="[de]"></a>Ch376DiskConnect</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ch376.o(i.Ch376DiskConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Ch376DiskConnect &rArr; CH376SendCmdWaitInt &rArr; Wait376Interrupt &rArr; CH376GetIntStatus &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376SendCmdWaitInt
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376GetIntStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usb_deal_insert
</UL>

<P><STRONG><a name="[d6]"></a>Ch376_enbale_Irq</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ch376.o(i.Ch376_enbale_Irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Ch376_enbale_Irq
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usb_deal_insert
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usb_deal_identify
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Ch376
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait376Interrupt
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376SendCmdWaitInt
</UL>

<P><STRONG><a name="[ca]"></a>Check_bit</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, bit.o(i.Check_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Check_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alloc_sem
</UL>

<P><STRONG><a name="[1c]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, drive_uart.o(i.DMA1_Channel2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DMA1_Channel2_IRQHandler &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, drive_uart.o(i.DMA1_Channel4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DMA1_Channel4_IRQHandler &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, drive_uart.o(i.DMA1_Channel7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DMA1_Channel7_IRQHandler &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, drive_uart.o(i.DMA2_Channel4_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DMA2_Channel4_5_IRQHandler &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e0]"></a>DMA_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_irq
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel4_5_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDma_Init
</UL>

<P><STRONG><a name="[e1]"></a>DMA_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_irq
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel4_5_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWrite
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDma_Init
</UL>

<P><STRONG><a name="[1b0]"></a>DMA_DeInit</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDma_Init
</UL>

<P><STRONG><a name="[1be]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_GetCurrDataCounter))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_irq
</UL>

<P><STRONG><a name="[df]"></a>DMA_GetITStatus</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel4_5_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
</UL>

<P><STRONG><a name="[1b2]"></a>DMA_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDma_Init
</UL>

<P><STRONG><a name="[1b1]"></a>DMA_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDma_Init
</UL>

<P><STRONG><a name="[e4]"></a>DRI_Uart_Change_baud</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, drive_uart.o(i.DRI_Uart_Change_baud))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = DRI_Uart_Change_baud &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Uart_ioctol
</UL>

<P><STRONG><a name="[ea]"></a>DevChar_open</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, dev_char.o(i.DevChar_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Dev_IIC
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DevUart
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DevSpi
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DevGpio
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_open
</UL>

<P><STRONG><a name="[f0]"></a>Dev_IIC_ctor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, dev_iic.o(i.Dev_IIC_ctor))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_IIC_new
</UL>

<P><STRONG><a name="[ef]"></a>Dev_IIC_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dev_iic.o(i.Dev_IIC_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_IIC_ctor
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Dev_IIC
</UL>

<P><STRONG><a name="[f6]"></a>Dev_MAJORID</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, device.o(i.Dev_MAJORID))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_open
</UL>

<P><STRONG><a name="[f7]"></a>Dev_MINORID</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, device.o(i.Dev_MINORID))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_open
</UL>

<P><STRONG><a name="[f5]"></a>Dev_TYPE</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, device.o(i.Dev_TYPE))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_open
</UL>

<P><STRONG><a name="[57]"></a>Dev_Uart_close</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, dev_uart.o(i.Dev_Uart_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Dev_Uart_close &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_uart.o(i.Dev_Uart_ctor)
</UL>
<P><STRONG><a name="[f3]"></a>Dev_Uart_ctor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, dev_uart.o(i.Dev_Uart_ctor))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Uart_new
</UL>

<P><STRONG><a name="[5a]"></a>Dev_Uart_ioctol</STRONG> (Thumb, 300 bytes, Stack size 56 bytes, dev_uart.o(i.Dev_Uart_ioctol))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Dev_Uart_ioctol &rArr; DRI_Uart_Change_baud &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRI_Uart_Change_baud
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_uart.o(i.Dev_Uart_ctor)
</UL>
<P><STRONG><a name="[f2]"></a>Dev_Uart_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dev_uart.o(i.Dev_Uart_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Dev_Uart_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Uart_ctor
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DevUart
</UL>

<P><STRONG><a name="[56]"></a>Dev_Uart_open</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, dev_uart.o(i.Dev_Uart_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Dev_Uart_open &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_uart.o(i.Dev_Uart_ctor)
</UL>
<P><STRONG><a name="[58]"></a>Dev_Uart_read</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, dev_uart.o(i.Dev_Uart_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Dev_Uart_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_uart.o(i.Dev_Uart_ctor)
</UL>
<P><STRONG><a name="[5b]"></a>Dev_Uart_test</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, dev_uart.o(i.Dev_Uart_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Dev_Uart_test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_uart.o(i.Dev_Uart_ctor)
</UL>
<P><STRONG><a name="[59]"></a>Dev_Uart_write</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, dev_uart.o(i.Dev_Uart_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Dev_Uart_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_uart.o(i.Dev_Uart_ctor)
</UL>
<P><STRONG><a name="[f4]"></a>Dev_open</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, device.o(i.Dev_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_dev_lcd
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevChar_open
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_TYPE
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_MINORID
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_MAJORID
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Run
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_LCD
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Ch376
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_setData
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_self_check
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_run
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_getData
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_lcd
</UL>

<P><STRONG><a name="[fa]"></a>Dev_spi_ctor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, dev_spi.o(i.Dev_spi_ctor))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_spi_new
</UL>

<P><STRONG><a name="[f9]"></a>Dev_spi_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dev_spi.o(i.Dev_spi_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Dev_spi_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_spi_ctor
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DevSpi
</UL>

<P><STRONG><a name="[16]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drive_gpio.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI0_IRQHandler &rArr; ExtiIrq
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtiIrq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, drive_gpio.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI15_10_IRQHandler &rArr; ExtiIrq
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtiIrq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drive_gpio.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI1_IRQHandler &rArr; ExtiIrq
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtiIrq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drive_gpio.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI2_IRQHandler &rArr; ExtiIrq
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtiIrq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drive_gpio.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI3_IRQHandler &rArr; ExtiIrq
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtiIrq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drive_gpio.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI4_IRQHandler &rArr; ExtiIrq
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtiIrq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, drive_gpio.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI9_5_IRQHandler &rArr; ExtiIrq
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtiIrq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[fc]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVD_IRQHandler
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVD_Init
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_control_irq
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
</UL>

<P><STRONG><a name="[176]"></a>EXTI_DeInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVD_Init
</UL>

<P><STRONG><a name="[fd]"></a>EXTI_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[118]"></a>EXTI_Init</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVD_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_control_irq
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
</UL>

<P><STRONG><a name="[116]"></a>EXTI_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVD_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
</UL>

<P><STRONG><a name="[fe]"></a>Except_raise</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, except.o(i.Except_raise))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = Except_raise &rArr;  Except_raise (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Except_raise
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_calloc
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_alloc
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_map
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Except_raise
</UL>

<P><STRONG><a name="[117]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f10x_gpio.o(i.GPIO_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_control_irq
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
</UL>

<P><STRONG><a name="[13e]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin_init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHI_Set_parallel_direction
</UL>

<P><STRONG><a name="[13a]"></a>GPIO_ReadInputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputData))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHI_RX_byte
</UL>

<P><STRONG><a name="[119]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioRead
</UL>

<P><STRONG><a name="[13f]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadOutputData))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHI_TX_byte
</UL>

<P><STRONG><a name="[102]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartIoctol
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHI_Read_status
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHI_Lcd_E_edge
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHI_Write_vram
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHI_Send_cmd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHI_Reset_lcd
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Switch
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Set_vxy
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Clear
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Ch376
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRst_Ch376
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH376Cmd
</UL>

<P><STRONG><a name="[d0]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartIoctol
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHI_Read_status
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHI_Lcd_E_edge
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHI_Write_vram
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHI_Reset_lcd
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Switch
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Set_vxy
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Clear
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mInitCH376Host
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Ch376
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRst_Ch376
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376ReadBlock
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376DiskQuery
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376WriteHostBlock
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376SendCmdWaitInt
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376ReadVar8
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376GetIntStatus
</UL>

<P><STRONG><a name="[140]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_Write))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHI_TX_byte
</UL>

<P><STRONG><a name="[ec]"></a>Get_DevGpio</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, device_gpio.o(i.Get_DevGpio))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Get_DevGpio &rArr; driveGpio_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driveGpio_new
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devGpio_new
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevChar_open
</UL>

<P><STRONG><a name="[ed]"></a>Get_DevSpi</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, dev_spi.o(i.Get_DevSpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Get_DevSpi &rArr; Dev_spi_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_spi_new
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevChar_open
</UL>

<P><STRONG><a name="[eb]"></a>Get_DevUart</STRONG> (Thumb, 310 bytes, Stack size 16 bytes, dev_uart.o(i.Get_DevUart))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Get_DevUart &rArr; Dev_Uart_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alloc_sem
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Uart_new
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driveUart_new
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevChar_open
</UL>

<P><STRONG><a name="[ee]"></a>Get_Dev_IIC</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, dev_iic.o(i.Get_Dev_IIC))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_IIC_new
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevChar_open
</UL>

<P><STRONG><a name="[112]"></a>Get_Mode_chn</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, model_channel.o(i.Get_Mode_chn))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Get_Mode_chn &rArr; Model_chn_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_chn_new
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_save_data
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_default_conf
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_default_alarm
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_Commit_conf
</UL>

<P><STRONG><a name="[114]"></a>Get_storage</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, storage.o(i.Get_storage))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Get_storage &rArr; Storage_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Storage_new
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Set_file_position
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_power_off
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Resize
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strg_Updata_rcd_mgr
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Open_file
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Acc_chn_data
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_Commit_conf
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_run
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_Init_alm_mgr_by_STG_alm
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_Check_new_alarm
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_Cancle_alarm
</UL>

<P><STRONG><a name="[11a]"></a>HRst_Ch376</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ch376.o(i.HRst_Ch376))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HRst_Ch376 &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Ch376
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Ch376
</UL>

<P><STRONG><a name="[8]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[182]"></a>I2C_AcknowledgeConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_i2c.o(i.I2C_AcknowledgeConfig))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_IIC
</UL>

<P><STRONG><a name="[120]"></a>I2C_CheckEvent</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, stm32f10x_i2c.o(i.I2C_CheckEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_CheckEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_IIC
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_wait_EV
</UL>

<P><STRONG><a name="[125]"></a>I2C_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_i2c.o(i.I2C_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_IIC
</UL>

<P><STRONG><a name="[11b]"></a>I2C_DeInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f10x_i2c.o(i.I2C_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_IIC
</UL>

<P><STRONG><a name="[17f]"></a>I2C_GenerateSTART</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_i2c.o(i.I2C_GenerateSTART))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_IIC
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_IIC
</UL>

<P><STRONG><a name="[183]"></a>I2C_GenerateSTOP</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_i2c.o(i.I2C_GenerateSTOP))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_IIC
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_IIC
</UL>

<P><STRONG><a name="[17e]"></a>I2C_GetFlagStatus</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, stm32f10x_i2c.o(i.I2C_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = I2C_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_IIC
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_IIC
</UL>

<P><STRONG><a name="[11d]"></a>I2C_Init</STRONG> (Thumb, 222 bytes, Stack size 48 bytes, stm32f10x_i2c.o(i.I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_IIC
</UL>

<P><STRONG><a name="[184]"></a>I2C_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_i2c.o(i.I2C_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_IIC
</UL>

<P><STRONG><a name="[180]"></a>I2C_Send7bitAddress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_i2c.o(i.I2C_Send7bitAddress))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_IIC
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_IIC
</UL>

<P><STRONG><a name="[181]"></a>I2C_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_i2c.o(i.I2C_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_IIC
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_IIC
</UL>

<P><STRONG><a name="[124]"></a>I2C_StructInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_i2c.o(i.I2C_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_IIC
</UL>

<P><STRONG><a name="[121]"></a>Init_Ch376</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, ch376.o(i.Init_Ch376))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Init_Ch376 &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_open
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mInitCH376Host
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRst_Ch376
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376_enbale_Irq
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376GetIntStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
</UL>

<P><STRONG><a name="[123]"></a>Init_IIC</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, drive_iic.o(i.Init_IIC))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Init_IIC &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_StructInit
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_IIC
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_dev_IIC
</UL>

<P><STRONG><a name="[129]"></a>Init_spi</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, drive_spi.o(i.Init_spi))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Init_spi &rArr; SPI_I2S_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_StructInit
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ITConfig
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_mode_CP
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_baud_Prescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_devSpi
</UL>

<P><STRONG><a name="[130]"></a>IsDiskWriteProtect</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, ch376.o(i.IsDiskWriteProtect))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = IsDiskWriteProtect &rArr; CH376DiskReqSense &rArr; CH376SendCmdWaitInt &rArr; Wait376Interrupt &rArr; CH376GetIntStatus &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376ReadBlock
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376WriteHostBlock
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376SendCmdWaitInt
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376ReadVar8
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376DiskReqSense
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usb_deal_identify
</UL>

<P><STRONG><a name="[131]"></a>LCD_Run</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, glyph.o(i.LCD_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LCD_Run &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_open
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10a]"></a>LHI_Init_pwm</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, lcd_hardware_interfaces.o(i.LHI_Init_pwm))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LHI_Init_pwm &rArr; TIM_OC1Init
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHI_Pulse
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Init
</UL>

<P><STRONG><a name="[13b]"></a>LHI_Read_status</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lcd_hardware_interfaces.o(i.LHI_Read_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LHI_Read_status &rArr; LHI_Set_parallel_direction &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHI_Set_parallel_direction
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHI_RX_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHI_Wait
</UL>

<P><STRONG><a name="[10b]"></a>LHI_Reset_lcd</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lcd_hardware_interfaces.o(i.LHI_Reset_lcd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LHI_Reset_lcd &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHI_Lcd_E_edge
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Init
</UL>

<P><STRONG><a name="[103]"></a>LHI_Send_cmd</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lcd_hardware_interfaces.o(i.LHI_Send_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LHI_Send_cmd &rArr; LHI_TX_byte &rArr; LHI_Set_parallel_direction &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHI_TX_byte
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHI_Set_parallel_direction
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHI_Lcd_E_edge
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Set_vxy
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Clear
</UL>

<P><STRONG><a name="[10c]"></a>LHI_Set_pwm_duty</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lcd_hardware_interfaces.o(i.LHI_Set_pwm_duty))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LHI_Set_pwm_duty
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHI_Pulse
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Lightness
</UL>

<P><STRONG><a name="[10d]"></a>LHI_Wait</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lcd_hardware_interfaces.o(i.LHI_Wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LHI_Wait &rArr; LHI_Read_status &rArr; LHI_Set_parallel_direction &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHI_Read_status
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHI_Write_vram
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Set_vxy
</UL>

<P><STRONG><a name="[104]"></a>LHI_Write_vram</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lcd_hardware_interfaces.o(i.LHI_Write_vram))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LHI_Write_vram &rArr; LHI_Wait &rArr; LHI_Read_status &rArr; LHI_Set_parallel_direction &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHI_TX_byte
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHI_Lcd_E_edge
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHI_Wait
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Flush
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Clear
</UL>

<P><STRONG><a name="[141]"></a>List_map</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, list.o(i.List_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = List_map &rArr; Except_raise &rArr;  Except_raise (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Except_raise
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdl_notify
</UL>

<P><STRONG><a name="[142]"></a>List_push</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, list.o(i.List_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = List_push &rArr; Mem_alloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mdl_attach
</UL>

<P><STRONG><a name="[165]"></a>MdlChn_Cal_prc</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, model_channel.o(i.MdlChn_Cal_prc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MdlChn_Cal_prc
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_to_percentage
</UL>

<P><STRONG><a name="[148]"></a>MdlChn_Commit_conf</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, model_channel.o(i.MdlChn_Commit_conf))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = MdlChn_Commit_conf &rArr; STG_Resize &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Mode_chn
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_storage
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Resize
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_init
</UL>

<P><STRONG><a name="[14b]"></a>MdlChn_default_alarm</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, model_channel.o(i.MdlChn_default_alarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MdlChn_default_alarm &rArr; Get_Mode_chn &rArr; Model_chn_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Mode_chn
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_init
</UL>

<P><STRONG><a name="[14c]"></a>MdlChn_default_conf</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, model_channel.o(i.MdlChn_default_conf))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MdlChn_default_conf &rArr; Get_Mode_chn &rArr; Model_chn_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Mode_chn
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_Get_def_up_limit
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_Get_def_lower_limit
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_init
</UL>

<P><STRONG><a name="[15f]"></a>MdlChn_save_data</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, model_channel.o(i.MdlChn_save_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MdlChn_save_data &rArr; Get_Mode_chn &rArr; Model_chn_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Mode_chn
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_Save_2_conf
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_Save_2_alarm
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Acc_chn_conf
</UL>

<P><STRONG><a name="[7a]"></a>Mdl_addTmMdl</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, model.o(i.Mdl_addTmMdl))
<BR>[Address Reference Count : 1]<UL><LI> model.o(i.Model_ctor)
</UL>
<P><STRONG><a name="[76]"></a>Mdl_attach</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, model.o(i.Mdl_attach))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Mdl_attach &rArr; List_push &rArr; Mem_alloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_push
</UL>
<BR>[Address Reference Count : 1]<UL><LI> model.o(i.Model_ctor)
</UL>
<P><STRONG><a name="[7b]"></a>Mdl_delTmMdl</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, model.o(i.Mdl_delTmMdl))
<BR>[Address Reference Count : 1]<UL><LI> model.o(i.Model_ctor)
</UL>
<P><STRONG><a name="[77]"></a>Mdl_detach</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, model.o(i.Mdl_detach))
<BR>[Address Reference Count : 1]<UL><LI> model.o(i.Model_ctor)
</UL>
<P><STRONG><a name="[78]"></a>Mdl_getData</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, model.o(i.Mdl_getData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Mdl_getData
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> model.o(i.Model_ctor)
</UL>
<P><STRONG><a name="[7c]"></a>Mdl_notify</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, model.o(i.Mdl_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Mdl_notify &rArr; List_map &rArr; Except_raise &rArr;  Except_raise (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_map
</UL>
<BR>[Address Reference Count : 1]<UL><LI> model.o(i.Model_ctor)
</UL>
<P><STRONG><a name="[79]"></a>Mdl_setData</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, model.o(i.Mdl_setData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Mdl_setData
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> model.o(i.Model_ctor)
</UL>
<P><STRONG><a name="[143]"></a>Mem_alloc</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, mem.o(i.Mem_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Mem_alloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Except_raise
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_push
</UL>

<P><STRONG><a name="[154]"></a>Mem_calloc</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, mem.o(i.Mem_calloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Mem_calloc &rArr; calloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Except_raise
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_init
</UL>

<P><STRONG><a name="[169]"></a>Model_chn_ctor</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, model_channel.o(i.Model_chn_ctor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Model_chn_ctor
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_ctor
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_chn_new
</UL>

<P><STRONG><a name="[113]"></a>Model_chn_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, model_channel.o(i.Model_chn_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Model_chn_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_chn_ctor
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Mode_chn
</UL>

<P><STRONG><a name="[16a]"></a>Model_ctor</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, model.o(i.Model_ctor))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_chn_ctor
</UL>

<P><STRONG><a name="[16b]"></a>NVIC_Configuration</STRONG> (Thumb, 404 bytes, Stack size 8 bytes, intrinit.o(i.NVIC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16e]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[16d]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[16c]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, misc.o(i.NVIC_SetVectorTable))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[16f]"></a>OpenPrpClock</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, mysystemclock.o(i.OpenPrpClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OpenPrpClock
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f8]"></a>Open_dev_lcd</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, dev_lcd.o(i.Open_dev_lcd))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Open_dev_lcd &rArr; lcd_fm12864_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_fm12864_new
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_open
</UL>

<P><STRONG><a name="[157]"></a>Operate_in_tange</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, hmi_comm.o(i.Operate_in_tange))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Operate_in_tange
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_modify_sconf
</UL>

<P><STRONG><a name="[11]"></a>PVD_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, power.o(i.PVD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = PVD_IRQHandler &rArr; System_power_off &rArr; STG_Set_file_position &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_power_off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[175]"></a>PVD_Init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, power.o(i.PVD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PVD_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_PVDLevelConfig
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_PVDCmd
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_StructInit
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_DeInit
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[178]"></a>PWR_PVDCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_pwr.o(i.PWR_PVDCmd))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVD_Init
</UL>

<P><STRONG><a name="[177]"></a>PWR_PVDLevelConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_pwr.o(i.PWR_PVDLevelConfig))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVD_Init
</UL>

<P><STRONG><a name="[179]"></a>Pin_init</STRONG> (Thumb, 442 bytes, Stack size 8 bytes, pinmux.o(i.Pin_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Pin_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17a]"></a>Power_Ch376</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ch376.o(i.Power_Ch376))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Power_Ch376
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
</UL>

<P><STRONG><a name="[15a]"></a>Print_float</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, phn_string.o(i.Print_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Print_float &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_to_string
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_modify_sconf
</UL>

<P><STRONG><a name="[168]"></a>Print_singnaltype</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, phn_string.o(i.Print_singnaltype))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Print_singnaltype &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_to_string
</UL>

<P><STRONG><a name="[159]"></a>Print_touch_spot</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, phn_string.o(i.Print_touch_spot))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Print_touch_spot &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_to_string
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_modify_sconf
</UL>

<P><STRONG><a name="[166]"></a>Print_unit</STRONG> (Thumb, 672 bytes, Stack size 16 bytes, phn_string.o(i.Print_unit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Print_unit &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_to_string
</UL>

<P><STRONG><a name="[172]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenPrpClock
</UL>

<P><STRONG><a name="[171]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVD_Init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenPrpClock
</UL>

<P><STRONG><a name="[11c]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DeInit
</UL>

<P><STRONG><a name="[170]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenPrpClock
</UL>

<P><STRONG><a name="[1ac]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[11e]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>

<P><STRONG><a name="[17d]"></a>Read_IIC</STRONG> (Thumb, 348 bytes, Stack size 56 bytes, drive_iic.o(i.Read_IIC))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = Read_IIC &rArr; Init_IIC &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReceiveData
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DeInit
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckEvent
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_AcknowledgeConfig
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_IIC
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_wait_EV
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_dev_IIC
</UL>

<P><STRONG><a name="[185]"></a>Read_spi</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, drive_spi.o(i.Read_spi))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Read_spi &rArr; spi_read_word
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_word
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_devSpi
</UL>

<P><STRONG><a name="[33]"></a>SPI1_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drive_spi.o(i.SPI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>SPI2_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drive_spi.o(i.SPI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12f]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_spi
</UL>

<P><STRONG><a name="[188]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_IRQHandler
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_word
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_word
</UL>

<P><STRONG><a name="[12e]"></a>SPI_I2S_ITConfig</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, stm32f10x_spi.o(i.SPI_I2S_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_I2S_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_spi
</UL>

<P><STRONG><a name="[189]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_IRQHandler
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_word
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_word
</UL>

<P><STRONG><a name="[201]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_word
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_word
</UL>

<P><STRONG><a name="[12d]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_spi
</UL>

<P><STRONG><a name="[12a]"></a>SPI_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_spi
</UL>

<P><STRONG><a name="[149]"></a>STG_Resize</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, storage.o(i.STG_Resize))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = STG_Resize &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_storage
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Open_file
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_Commit_conf
</UL>

<P><STRONG><a name="[146]"></a>STG_Set_file_position</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, storage.o(i.STG_Set_file_position))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = STG_Set_file_position &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_storage
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Open_file
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_power_off
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_Init_alm_mgr_by_STG_alm
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_Check_new_alarm
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_Cancle_alarm
</UL>

<P><STRONG><a name="[145]"></a>SYS_time_sec</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, system.o(i.SYS_time_sec))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SYS_time_sec &rArr; Time_2_u32
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_2_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_power_off
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Acc_chn_data
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_Check_new_alarm
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_Cancle_alarm
</UL>

<P><STRONG><a name="[111]"></a>Sem_init</STRONG> (Thumb, 594 bytes, Stack size 16 bytes, rtx_depend.o(i.Sem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Sem_init &rArr; osSemaphoreCreate &rArr; svcSemaphoreCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DevUart
</UL>

<P><STRONG><a name="[194]"></a>Sem_post</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, rtx_depend.o(i.Sem_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Sem_post &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPostTxSem
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPostRxSem
</UL>

<P><STRONG><a name="[196]"></a>Sem_wait</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, rtx_depend.o(i.Sem_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Sem_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWaitTxSem
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWaitRxSem
</UL>

<P><STRONG><a name="[cb]"></a>Set_bit</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, bit.o(i.Set_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Set_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Alloc_sem
</UL>

<P><STRONG><a name="[15b]"></a>SmBus_AI_Read</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, smart_bus.o(i.SmBus_AI_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SmBus_AI_Read &rArr; SmBus_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_crc
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Tail
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_run
</UL>

<P><STRONG><a name="[161]"></a>SmBus_AI_config</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, smart_bus.o(i.SmBus_AI_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SmBus_AI_config &rArr; SmBus_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_crc
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_U16
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Tail
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_setData
</UL>

<P><STRONG><a name="[164]"></a>SmBus_DO_output</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, smart_bus.o(i.SmBus_DO_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = SmBus_DO_output &rArr; SmBus_Write &rArr; SmBus_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_setData
</UL>

<P><STRONG><a name="[1a2]"></a>SmBus_Get_crc</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, smart_bus.o(i.SmBus_Get_crc))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_dcd_read
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_dcd_query
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_dcd_AI_read
</UL>

<P><STRONG><a name="[160]"></a>SmBus_Query</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, smart_bus.o(i.SmBus_Query))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SmBus_Query &rArr; SmBus_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_crc
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Tail
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_self_check
</UL>

<P><STRONG><a name="[151]"></a>SmBus_RD_hig_limit</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, smart_bus.o(i.SmBus_RD_hig_limit))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SmBus_RD_hig_limit &rArr; SmBus_Read &rArr; SmBus_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_getData
</UL>

<P><STRONG><a name="[152]"></a>SmBus_RD_low_limit</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, smart_bus.o(i.SmBus_RD_low_limit))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SmBus_RD_low_limit &rArr; SmBus_Read &rArr; SmBus_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_getData
</UL>

<P><STRONG><a name="[19e]"></a>SmBus_Read</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, smart_bus.o(i.SmBus_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SmBus_Read &rArr; SmBus_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_crc
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Tail
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_rd_signal_type
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Read_DO
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_RD_low_limit
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_RD_hig_limit
</UL>

<P><STRONG><a name="[153]"></a>SmBus_Read_DO</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, smart_bus.o(i.SmBus_Read_DO))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SmBus_Read_DO &rArr; SmBus_Read &rArr; SmBus_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_getData
</UL>

<P><STRONG><a name="[162]"></a>SmBus_WR_hig_limit</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, smart_bus.o(i.SmBus_WR_hig_limit))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = SmBus_WR_hig_limit &rArr; SmBus_Write &rArr; SmBus_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_setData
</UL>

<P><STRONG><a name="[163]"></a>SmBus_WR_low_limit</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, smart_bus.o(i.SmBus_WR_low_limit))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = SmBus_WR_low_limit &rArr; SmBus_Write &rArr; SmBus_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_setData
</UL>

<P><STRONG><a name="[19d]"></a>SmBus_Write</STRONG> (Thumb, 188 bytes, Stack size 64 bytes, smart_bus.o(i.SmBus_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SmBus_Write &rArr; SmBus_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_crc
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Tail
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_WR_low_limit
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_WR_hig_limit
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_DO_output
</UL>

<P><STRONG><a name="[150]"></a>SmBus_decode</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, smart_bus.o(i.SmBus_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SmBus_decode &rArr; SmBus_dcd_read &rArr; SmBus_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_dcd_read
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_dcd_query
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_dcd_AI_read
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_setData
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_self_check
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_run
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_getData
</UL>

<P><STRONG><a name="[14f]"></a>SmBus_rd_signal_type</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, smart_bus.o(i.SmBus_rd_signal_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SmBus_rd_signal_type &rArr; SmBus_Read &rArr; SmBus_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_getData
</UL>

<P><STRONG><a name="[1a7]"></a>Storage_ctor</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, storage.o(i.Storage_ctor))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Storage_new
</UL>

<P><STRONG><a name="[115]"></a>Storage_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, storage.o(i.Storage_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Storage_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Storage_ctor
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_storage
</UL>

<P><STRONG><a name="[4e]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[174]"></a>System_power_off</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, system.o(i.System_power_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = System_power_off &rArr; STG_Set_file_position &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Set_file_position
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_storage
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_time_sec
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVD_IRQHandler
</UL>

<P><STRONG><a name="[2c]"></a>TIM2_IRQHandler</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, times.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM2_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a9]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[135]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHI_Init_pwm
</UL>

<P><STRONG><a name="[1a8]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f10x_tim.o(i.TIM_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[133]"></a>TIM_OC1Init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TIM_OC1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHI_Init_pwm
</UL>

<P><STRONG><a name="[134]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_OC1PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHI_Init_pwm
</UL>

<P><STRONG><a name="[137]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetCompare1))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHI_Set_pwm_duty
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHI_Init_pwm
</UL>

<P><STRONG><a name="[132]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHI_Init_pwm
</UL>

<P><STRONG><a name="[1aa]"></a>Test_lcd</STRONG> (Thumb, 424 bytes, Stack size 24 bytes, test_lcd.o(i.Test_lcd))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Test_lcd &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_open
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unit_test
</UL>

<P><STRONG><a name="[191]"></a>Time_2_u32</STRONG> (Thumb, 132 bytes, Stack size 12 bytes, system.o(i.Time_2_u32))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Time_2_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_time_sec
</UL>

<P><STRONG><a name="[44]"></a>UART4_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drive_uart.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = UART4_IRQHandler &rArr; Usart_irq &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>USART1_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drive_uart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USART1_IRQHandler &rArr; Usart_irq &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>USART2_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drive_uart.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USART2_IRQHandler &rArr; Usart_irq &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>USART3_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drive_uart.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USART3_IRQHandler &rArr; Usart_irq &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e2]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_irq
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel4_5_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
</UL>

<P><STRONG><a name="[e5]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRI_Uart_Change_baud
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDeInit
</UL>

<P><STRONG><a name="[1b6]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
</UL>

<P><STRONG><a name="[e6]"></a>USART_DeInit</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRI_Uart_Change_baud
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDeInit
</UL>

<P><STRONG><a name="[1bc]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWrite
</UL>

<P><STRONG><a name="[1b7]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_irq
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRead
</UL>

<P><STRONG><a name="[e3]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_irq
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel4_5_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWrite
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
</UL>

<P><STRONG><a name="[e7]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRI_Uart_Change_baud
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
</UL>

<P><STRONG><a name="[e9]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_irq
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRead
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRI_Uart_clean_idle
</UL>

<P><STRONG><a name="[1bb]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_irq
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWrite
</UL>

<P><STRONG><a name="[128]"></a>USB_Init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, usb.o(i.USB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = USB_Init &rArr; Init_Ch376 &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CQ_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deal_status
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Ch376
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Ch376
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_device
</UL>

<P><STRONG><a name="[1ae]"></a>USB_Run</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, usb.o(i.USB_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USB_Run &rArr; CQ_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CQ_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[96]"></a>UartGiveBackPlayloadBuf</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, drive_uart.o(i.UartGiveBackPlayloadBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UartGiveBackPlayloadBuf &rArr; free_playloadbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_playloadbuf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drive_uart.o(i.driveUart_ctor)
</UL>
<P><STRONG><a name="[1ab]"></a>Usart_irq</STRONG> (Thumb, 326 bytes, Stack size 32 bytes, drive_uart.o(i.Usart_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Usart_irq &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_receivebuf
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_loadbuflen
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRI_Uart_clean_idle
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[1c0]"></a>Write_IIC</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, drive_iic.o(i.Write_IIC))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Write_IIC &rArr; I2C_wait_EV &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_wait_EV
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_dev_IIC
</UL>

<P><STRONG><a name="[1c1]"></a>Write_spi</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, drive_spi.o(i.Write_spi))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Write_spi &rArr; spi_write_word
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_word
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_devSpi
</UL>

<P><STRONG><a name="[1c3]"></a>__0fprintf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0fprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[220]"></a>__1fprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0fprintf$8), UNUSED)

<P><STRONG><a name="[ff]"></a>__2fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0fprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Except_raise
</UL>

<P><STRONG><a name="[1c5]"></a>__0sprintf$8</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[221]"></a>__1sprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)

<P><STRONG><a name="[158]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_touch_spot
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_singnaltype
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_float
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Open_file
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_to_string
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_modify_sconf
</UL>

<P><STRONG><a name="[f1]"></a>free</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, mallocr.o(i.__free$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Uart_open
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Uart_close
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DevGpio
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDeInit
</UL>

<P><STRONG><a name="[c7]"></a>malloc</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, mallocr.o(i.__malloc$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_alloc
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_Uart_new
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_fm12864_new
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driveUart_new
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driveGpio_new
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devGpio_new
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_IIC_new
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_spi_new
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Storage_new
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Model_chn_new
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>

<P><STRONG><a name="[222]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[223]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[224]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1f7]"></a>_init_box</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, rt_membox.o(i._init_box))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _init_box
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[1f6]"></a>dbg_init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, hal_cm.o(i.dbg_init))
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[1fd]"></a>dbg_task_notify</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hal_cm.o(i.dbg_task_notify))
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
</UL>

<P><STRONG><a name="[1f4]"></a>dbg_task_switch</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_cm.o(i.dbg_task_switch))
<BR><BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
</UL>

<P><STRONG><a name="[d2]"></a>delay_ms</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rtx_depend.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTest
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHI_Reset_lcd
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usb_deal_insert
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mInitCH376Host
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRst_Ch376
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait376Interrupt
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376SendCmdWaitInt
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376GetIntStatus
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376DiskReqSense
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_self_check
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_run
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_Check_new_alarm
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_lcd
</UL>

<P><STRONG><a name="[1ca]"></a>devGpio_ctor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, device_gpio.o(i.devGpio_ctor))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devGpio_new
</UL>

<P><STRONG><a name="[10e]"></a>devGpio_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, device_gpio.o(i.devGpio_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = devGpio_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;devGpio_ctor
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DevGpio
</UL>

<P><STRONG><a name="[1d8]"></a>dev_lcd_ctor</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dev_lcd.o(i.dev_lcd_ctor))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_fm12864_ctor
</UL>

<P><STRONG><a name="[1cb]"></a>driveGpio_ctor</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, drive_gpio.o(i.driveGpio_ctor))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driveGpio_new
</UL>

<P><STRONG><a name="[10f]"></a>driveGpio_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drive_gpio.o(i.driveGpio_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = driveGpio_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driveGpio_ctor
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DevGpio
</UL>

<P><STRONG><a name="[1cc]"></a>driveUart_ctor</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, drive_uart.o(i.driveUart_ctor))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driveUart_new
</UL>

<P><STRONG><a name="[110]"></a>driveUart_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drive_uart.o(i.driveUart_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = driveUart_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driveUart_ctor
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_DevUart
</UL>

<P><STRONG><a name="[82]"></a>fputc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, main.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0fprintf$8)
</UL>
<P><STRONG><a name="[1b4]"></a>free_playloadbuf</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ping_pongbuf.o(i.free_playloadbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free_playloadbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGiveBackPlayloadBuf
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRead
</UL>

<P><STRONG><a name="[1bd]"></a>get_loadbuflen</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ping_pongbuf.o(i.get_loadbuflen))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_irq
</UL>

<P><STRONG><a name="[1b8]"></a>get_playloadbuf</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ping_pongbuf.o(i.get_playloadbuf))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTakeUpPlayloadBuf
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRead
</UL>

<P><STRONG><a name="[1b5]"></a>init_pingponfbuf</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, ping_pongbuf.o(i.init_pingponfbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = init_pingponfbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
</UL>

<P><STRONG><a name="[1cd]"></a>isrMessageGet</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, rt_cmsis.o(i.isrMessageGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = isrMessageGet &rArr; isr_mbx_receive &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
</UL>

<P><STRONG><a name="[1cf]"></a>isrMessagePut</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, rt_cmsis.o(i.isrMessagePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_check
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
</UL>

<P><STRONG><a name="[1d2]"></a>isrSemaphoreRelease</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rt_cmsis.o(i.isrSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_sem_send
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>

<P><STRONG><a name="[1ce]"></a>isr_mbx_receive</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, rt_mailbox.o(i.isr_mbx_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isr_mbx_receive &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessageGet
</UL>

<P><STRONG><a name="[1d1]"></a>isr_mbx_send</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rt_mailbox.o(i.isr_mbx_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessagePut
</UL>

<P><STRONG><a name="[1d4]"></a>isr_sem_send</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_semaphore.o(i.isr_sem_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrSemaphoreRelease
</UL>

<P><STRONG><a name="[1d7]"></a>lcd_fm12864_ctor</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dev_lcd_fm12864.o(i.lcd_fm12864_ctor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lcd_fm12864_ctor
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_lcd_ctor
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_fm12864_new
</UL>

<P><STRONG><a name="[173]"></a>lcd_fm12864_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dev_lcd_fm12864.o(i.lcd_fm12864_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lcd_fm12864_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_fm12864_ctor
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Open_dev_lcd
</UL>

<P><STRONG><a name="[122]"></a>mInitCH376Host</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, ch376.o(i.mInitCH376Host))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mInitCH376Host &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH376Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Ch376
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Ch376
</UL>

<P><STRONG><a name="[b4]"></a>main</STRONG> (Thumb, 168 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = main &rArr; Init_device &rArr; USB_Init &rArr; Init_Ch376 &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unit_test
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Run
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pin_init
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVD_Init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenPrpClock
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Run
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_device
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_conf_cm.o(.constdata)
</UL>
<P><STRONG><a name="[1c9]"></a>osDelay</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osDelay))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b8]"></a>osKernelInitialize</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_cmsis.o(i.osKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osKernelInitialize &rArr; svcKernelInitialize &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_init
</UL>

<P><STRONG><a name="[ba]"></a>osKernelStart</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, rt_cmsis.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osKernelStart
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_init
</UL>

<P><STRONG><a name="[1da]"></a>osMessageGet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osMessageGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osMessageGet &rArr; isrMessageGet &rArr; isr_mbx_receive &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessageGet
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerThread
</UL>

<P><STRONG><a name="[192]"></a>osSemaphoreCreate</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rt_cmsis.o(i.osSemaphoreCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osSemaphoreCreate &rArr; svcSemaphoreCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_init
</UL>

<P><STRONG><a name="[195]"></a>osSemaphoreRelease</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.osSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_post
</UL>

<P><STRONG><a name="[193]"></a>osSemaphoreWait</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rt_cmsis.o(i.osSemaphoreWait))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_wait
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_init
</UL>

<P><STRONG><a name="[b9]"></a>osThreadCreate</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rt_cmsis.o(i.osThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osThreadCreate &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_init
</UL>

<P><STRONG><a name="[b2]"></a>osThreadExit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_cmsis.o(i.osThreadExit))
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.svcThreadCreate)
</UL>
<P><STRONG><a name="[1db]"></a>osTimerCall</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_cmsis.o(i.osTimerCall))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerThread
</UL>

<P><STRONG><a name="[b3]"></a>osTimerThread</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rt_cmsis.o(i.osTimerThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osTimerThread &rArr; osMessageGet &rArr; isrMessageGet &rArr; isr_mbx_receive &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerCall
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_conf_cm.o(.constdata)
</UL>
<P><STRONG><a name="[1ed]"></a>os_error</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rtx_conf_cm.o(i.os_error))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
</UL>

<P><STRONG><a name="[b1]"></a>os_idle_demon</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtx_conf_cm.o(i.os_idle_demon))
<BR>[Address Reference Count : 1]<UL><LI> rt_task.o(i.rt_sys_init)
</UL>
<P><STRONG><a name="[1fa]"></a>os_tick_init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rt_system.o(i.os_tick_init))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_start
</UL>

<P><STRONG><a name="[bf]"></a>os_tick_irqack</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rt_system.o(i.os_tick_irqack), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Handler
</UL>

<P><STRONG><a name="[4c]"></a>rt_alloc_box</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_membox.o(i.rt_alloc_box))
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_cm3.o(.emb_text)
</UL>
<P><STRONG><a name="[207]"></a>rt_alloc_mem</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, rt_memory.o(i.rt_alloc_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_alloc_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>

<P><STRONG><a name="[1dc]"></a>rt_block</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rt_task.o(i.rt_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_dly
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_wait
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dly_wait
</UL>

<P><STRONG><a name="[1e0]"></a>rt_chk_robin</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, rt_robin.o(i.rt_chk_robin))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_chk_robin &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[1e2]"></a>rt_dec_dly</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, rt_list.o(i.rt_dec_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_dec_dly &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[1e3]"></a>rt_dispatch</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, rt_task.o(i.rt_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_send
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
</UL>

<P><STRONG><a name="[1e5]"></a>rt_dly_wait</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rt_time.o(i.rt_dly_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_dly_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcDelay
</UL>

<P><STRONG><a name="[1e6]"></a>rt_evt_psh</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, rt_event.o(i.rt_evt_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_evt_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val2
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[4d]"></a>rt_free_box</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, rt_membox.o(i.rt_free_box))
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_cm3.o(.emb_text)
</UL>
<P><STRONG><a name="[208]"></a>rt_free_mem</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rt_memory.o(i.rt_free_mem))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadTerminate
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>

<P><STRONG><a name="[1de]"></a>rt_get_first</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rt_list.o(i.rt_get_first))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_send
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>

<P><STRONG><a name="[203]"></a>rt_init_mem</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memory.o(i.rt_init_mem))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>

<P><STRONG><a name="[1f8]"></a>rt_init_robin</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_robin.o(i.rt_init_robin))
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[1ea]"></a>rt_init_stack</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, hal_cm.o(i.rt_init_stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_init_stack
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
</UL>

<P><STRONG><a name="[1d0]"></a>rt_mbx_check</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_mailbox.o(i.rt_mbx_check))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessagePut
</UL>

<P><STRONG><a name="[205]"></a>rt_mbx_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_mailbox.o(i.rt_mbx_init))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageCreate
</UL>

<P><STRONG><a name="[1eb]"></a>rt_mbx_psh</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, rt_mailbox.o(i.rt_mbx_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rt_mbx_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val2
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[1ee]"></a>rt_mbx_wait</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, rt_mailbox.o(i.rt_mbx_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = rt_mbx_wait &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageGet
</UL>

<P><STRONG><a name="[bc]"></a>rt_pop_req</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, rt_system.o(i.rt_pop_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rt_pop_req &rArr; rt_mbx_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[1d6]"></a>rt_psh_req</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rt_system.o(i.rt_psh_req))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_sem_send
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_receive
</UL>

<P><STRONG><a name="[1d5]"></a>rt_psq_enq</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, rt_list.o(i.rt_psq_enq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_sem_send
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_receive
</UL>

<P><STRONG><a name="[1dd]"></a>rt_put_dly</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, rt_list.o(i.rt_put_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_put_dly
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>

<P><STRONG><a name="[1e1]"></a>rt_put_prio</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, rt_list.o(i.rt_put_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dec_dly
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_wait
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>

<P><STRONG><a name="[1e4]"></a>rt_put_rdy_first</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_list.o(i.rt_put_rdy_first))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>

<P><STRONG><a name="[1f0]"></a>rt_resort_prio</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rt_list.o(i.rt_resort_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_resort_prio &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_list
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
</UL>

<P><STRONG><a name="[1ec]"></a>rt_ret_val</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_cm.o(i.rt_ret_val))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_send
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
</UL>

<P><STRONG><a name="[1e8]"></a>rt_ret_val2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_cm.o(i.rt_ret_val2))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
</UL>

<P><STRONG><a name="[1e7]"></a>rt_rmv_dly</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rt_list.o(i.rt_rmv_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_rmv_dly
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_send
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
</UL>

<P><STRONG><a name="[1f1]"></a>rt_rmv_list</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, rt_list.o(i.rt_rmv_list))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>

<P><STRONG><a name="[206]"></a>rt_sem_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rt_semaphore.o(i.rt_sem_init))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreCreate
</UL>

<P><STRONG><a name="[1ef]"></a>rt_sem_psh</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rt_semaphore.o(i.rt_sem_psh))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_sem_psh &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[1f2]"></a>rt_sem_send</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rt_semaphore.o(i.rt_sem_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rt_sem_send &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreRelease
</UL>

<P><STRONG><a name="[1f3]"></a>rt_sem_wait</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, rt_semaphore.o(i.rt_sem_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_sem_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreWait
</UL>

<P><STRONG><a name="[bb]"></a>rt_stk_check</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rt_system.o(i.rt_stk_check))
<BR><BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>

<P><STRONG><a name="[1df]"></a>rt_switch_req</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_task.o(i.rt_switch_req))
<BR><BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_task_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>

<P><STRONG><a name="[1f5]"></a>rt_sys_init</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, rt_task.o(i.rt_sys_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_sys_init &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_robin
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_init
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_box
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>

<P><STRONG><a name="[1f9]"></a>rt_sys_start</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, rt_task.o(i.rt_sys_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_sys_start
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelStart
</UL>

<P><STRONG><a name="[bd]"></a>rt_systick</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rt_system.o(i.rt_systick))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_systick &rArr; sysTimerTick &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dec_dly
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Handler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1fc]"></a>rt_tsk_create</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, rt_task.o(i.rt_tsk_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_task_notify
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>

<P><STRONG><a name="[1fe]"></a>rt_tsk_delete</STRONG> (Thumb, 352 bytes, Stack size 40 bytes, rt_task.o(i.rt_tsk_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = rt_tsk_delete &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_list
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_PSP
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_task_notify
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_box
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadTerminate
</UL>

<P><STRONG><a name="[200]"></a>rt_tsk_prio</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, rt_task.o(i.rt_tsk_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = rt_tsk_prio &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelStart
</UL>

<P><STRONG><a name="[209]"></a>rt_tsk_self</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rt_task.o(i.rt_tsk_self))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadGetId
</UL>

<P><STRONG><a name="[a6]"></a>svcDelay</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = svcDelay &rArr; rt_dly_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dly_wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osDelay)
</UL>
<P><STRONG><a name="[a7]"></a>svcKernelInitialize</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = svcKernelInitialize &rArr; svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_mem
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osKernelInitialize)
</UL>
<P><STRONG><a name="[a8]"></a>svcKernelStart</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = svcKernelStart &rArr; rt_tsk_prio &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osKernelStart)
</UL>
<P><STRONG><a name="[204]"></a>svcMessageCreate</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcMessageCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcMessageCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>

<P><STRONG><a name="[a9]"></a>svcMessageGet</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, rt_cmsis.o(i.svcMessageGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = svcMessageGet &rArr; rt_mbx_wait &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osMessageGet)
</UL>
<P><STRONG><a name="[aa]"></a>svcSemaphoreCreate</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcSemaphoreCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcSemaphoreCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osSemaphoreCreate)
</UL>
<P><STRONG><a name="[ab]"></a>svcSemaphoreRelease</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = svcSemaphoreRelease &rArr; rt_sem_send &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osSemaphoreRelease)
</UL>
<P><STRONG><a name="[ac]"></a>svcSemaphoreWait</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcSemaphoreWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = svcSemaphoreWait &rArr; rt_sem_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osSemaphoreWait)
</UL>
<P><STRONG><a name="[ad]"></a>svcThreadCreate</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, rt_cmsis.o(i.svcThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = svcThreadCreate &rArr; rt_tsk_create &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_mem
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osThreadCreate)
</UL>
<P><STRONG><a name="[ae]"></a>svcThreadGetId</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcThreadGetId))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_self
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osThreadExit)
</UL>
<P><STRONG><a name="[af]"></a>svcThreadTerminate</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcThreadTerminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = svcThreadTerminate &rArr; rt_tsk_delete &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tid2ptcb
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_mem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osThreadExit)
</UL>
<P><STRONG><a name="[b0]"></a>svcTimerCall</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rt_cmsis.o(i.svcTimerCall))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcTimerCall
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(i.osTimerCall)
</UL>
<P><STRONG><a name="[1b3]"></a>switch_receivebuf</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, ping_pongbuf.o(i.switch_receivebuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = switch_receivebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_irq
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDma_Init
</UL>

<P><STRONG><a name="[1fb]"></a>sysTimerTick</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, rt_cmsis.o(i.sysTimerTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sysTimerTick &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_insert
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessagePut
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[1d9]"></a>unit_test</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, unit_test.o(i.unit_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = unit_test &rArr; Test_lcd &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_lcd
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[126]"></a>Init_LCD</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i.Init_LCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Init_LCD &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_open
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_device
</UL>

<P><STRONG><a name="[127]"></a>Init_device</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(i.Init_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Init_device &rArr; USB_Init &rArr; Init_Ch376 &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_LCD
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a5]"></a>SmBus_Check_head</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, smart_bus.o(i.SmBus_Check_head))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_dcd_read
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_dcd_query
</UL>

<P><STRONG><a name="[1a0]"></a>SmBus_Check_tail</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, smart_bus.o(i.SmBus_Check_tail))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_dcd_read
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_dcd_query
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_dcd_AI_read
</UL>

<P><STRONG><a name="[1a1]"></a>SmBus_Cmd_err</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, smart_bus.o(i.SmBus_Cmd_err))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_dcd_read
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_dcd_query
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_dcd_AI_read
</UL>

<P><STRONG><a name="[1a3]"></a>SmBus_Get_u16</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, smart_bus.o(i.SmBus_Get_u16))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SmBus_Get_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_dcd_AI_read
</UL>

<P><STRONG><a name="[19b]"></a>SmBus_Tail</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, smart_bus.o(i.SmBus_Tail))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Write
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Read
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Query
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_AI_config
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_AI_Read
</UL>

<P><STRONG><a name="[19c]"></a>SmBus_U16</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, smart_bus.o(i.SmBus_U16))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_AI_config
</UL>

<P><STRONG><a name="[19a]"></a>SmBus_crc</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, smart_bus.o(i.SmBus_crc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SmBus_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Write
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Read
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Query
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_AI_config
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_AI_Read
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_dcd_read
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_dcd_query
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_dcd_AI_read
</UL>

<P><STRONG><a name="[19f]"></a>SmBus_dcd_AI_read</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, smart_bus.o(i.SmBus_dcd_AI_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SmBus_dcd_AI_read &rArr; SmBus_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Get_crc
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_crc
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Get_u16
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Cmd_err
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Check_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_decode
</UL>

<P><STRONG><a name="[1a4]"></a>SmBus_dcd_query</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, smart_bus.o(i.SmBus_dcd_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SmBus_dcd_query &rArr; SmBus_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Get_crc
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_crc
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Cmd_err
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Check_tail
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Check_head
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_decode
</UL>

<P><STRONG><a name="[1a6]"></a>SmBus_dcd_read</STRONG> (Thumb, 204 bytes, Stack size 64 bytes, smart_bus.o(i.SmBus_dcd_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SmBus_dcd_read &rArr; SmBus_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Get_crc
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_crc
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Cmd_err
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Check_tail
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Check_head
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_decode
</UL>

<P><STRONG><a name="[fb]"></a>ExtiIrq</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, drive_gpio.o(i.ExtiIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ExtiIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[8b]"></a>GpioDeInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drive_gpio.o(i.GpioDeInit))
<BR>[Address Reference Count : 1]<UL><LI> drive_gpio.o(i.driveGpio_ctor)
</UL>
<P><STRONG><a name="[8a]"></a>GpioInit</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, drive_gpio.o(i.GpioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GpioInit &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_StructInit
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drive_gpio.o(i.driveGpio_ctor)
</UL>
<P><STRONG><a name="[8c]"></a>GpioRead</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, drive_gpio.o(i.GpioRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GpioRead
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drive_gpio.o(i.driveGpio_ctor)
</UL>
<P><STRONG><a name="[8f]"></a>GpioSetEncode</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drive_gpio.o(i.GpioSetEncode))
<BR>[Address Reference Count : 1]<UL><LI> drive_gpio.o(i.driveGpio_ctor)
</UL>
<P><STRONG><a name="[8e]"></a>GpioSetIrqHdl</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drive_gpio.o(i.GpioSetIrqHdl))
<BR>[Address Reference Count : 1]<UL><LI> drive_gpio.o(i.driveGpio_ctor)
</UL>
<P><STRONG><a name="[91]"></a>GpioTest</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drive_gpio.o(i.GpioTest))
<BR>[Address Reference Count : 1]<UL><LI> drive_gpio.o(i.driveGpio_ctor)
</UL>
<P><STRONG><a name="[8d]"></a>GpioWrite</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drive_gpio.o(i.GpioWrite))
<BR>[Address Reference Count : 1]<UL><LI> drive_gpio.o(i.driveGpio_ctor)
</UL>
<P><STRONG><a name="[90]"></a>Gpio_control_irq</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, drive_gpio.o(i.Gpio_control_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Gpio_control_irq &rArr; GPIO_EXTILineConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drive_gpio.o(i.driveGpio_ctor)
</UL>
<P><STRONG><a name="[11f]"></a>I2C_wait_EV</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, drive_iic.o(i.I2C_wait_EV))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_wait_EV &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_IIC
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_IIC
</UL>

<P><STRONG><a name="[12c]"></a>Spi_baud_Prescaler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drive_spi.o(i.Spi_baud_Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_spi
</UL>

<P><STRONG><a name="[12b]"></a>Spi_mode_CP</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, drive_spi.o(i.Spi_mode_CP))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_spi
</UL>

<P><STRONG><a name="[186]"></a>spi_read_word</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, drive_spi.o(i.spi_read_word))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spi_read_word
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_spi
</UL>

<P><STRONG><a name="[1c2]"></a>spi_write_word</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, drive_spi.o(i.spi_write_word))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spi_write_word
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_spi
</UL>

<P><STRONG><a name="[e8]"></a>DRI_Uart_clean_idle</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, drive_uart.o(i.DRI_Uart_clean_idle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DRI_Uart_clean_idle
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_irq
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
</UL>

<P><STRONG><a name="[93]"></a>UartDeInit</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, drive_uart.o(i.UartDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UartDeInit &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drive_uart.o(i.driveUart_ctor)
</UL>
<P><STRONG><a name="[1af]"></a>UartDma_Init</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, drive_uart.o(i.UartDma_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = UartDma_Init &rArr; switch_receivebuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_receivebuf
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
</UL>

<P><STRONG><a name="[92]"></a>UartInit</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, drive_uart.o(i.UartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = UartInit &rArr; UartDma_Init &rArr; switch_receivebuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_pingponfbuf
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDma_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRI_Uart_clean_idle
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drive_uart.o(i.driveUart_ctor)
</UL>
<P><STRONG><a name="[98]"></a>UartIoctol</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, drive_uart.o(i.UartIoctol))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UartIoctol
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drive_uart.o(i.driveUart_ctor)
</UL>
<P><STRONG><a name="[94]"></a>UartRead</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, drive_uart.o(i.UartRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UartRead &rArr; free_playloadbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_playloadbuf
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_playloadbuf
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drive_uart.o(i.driveUart_ctor)
</UL>
<P><STRONG><a name="[9a]"></a>UartSetIdp</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, drive_uart.o(i.UartSetIdp))
<BR>[Address Reference Count : 1]<UL><LI> drive_uart.o(i.driveUart_ctor)
</UL>
<P><STRONG><a name="[99]"></a>UartSetLedHdl</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drive_uart.o(i.UartSetLedHdl))
<BR>[Address Reference Count : 1]<UL><LI> drive_uart.o(i.driveUart_ctor)
</UL>
<P><STRONG><a name="[9c]"></a>UartSetPostSem</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drive_uart.o(i.UartSetPostSem))
<BR>[Address Reference Count : 1]<UL><LI> drive_uart.o(i.driveUart_ctor)
</UL>
<P><STRONG><a name="[9b]"></a>UartSetWaitSem</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drive_uart.o(i.UartSetWaitSem))
<BR>[Address Reference Count : 1]<UL><LI> drive_uart.o(i.driveUart_ctor)
</UL>
<P><STRONG><a name="[95]"></a>UartTakeUpPlayloadBuf</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, drive_uart.o(i.UartTakeUpPlayloadBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UartTakeUpPlayloadBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_playloadbuf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drive_uart.o(i.driveUart_ctor)
</UL>
<P><STRONG><a name="[9d]"></a>UartTest</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, drive_uart.o(i.UartTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = UartTest &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drive_uart.o(i.driveUart_ctor)
</UL>
<P><STRONG><a name="[97]"></a>UartWrite</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, drive_uart.o(i.UartWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = UartWrite &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drive_uart.o(i.driveUart_ctor)
</UL>
<P><STRONG><a name="[60]"></a>UartLedRxHdl</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dev_uart.o(i.UartLedRxHdl))
<BR>[Address Reference Count : 1]<UL><LI> dev_uart.o(i.Dev_Uart_open)
</UL>
<P><STRONG><a name="[61]"></a>UartLedTxHdl</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dev_uart.o(i.UartLedTxHdl))
<BR>[Address Reference Count : 1]<UL><LI> dev_uart.o(i.Dev_Uart_open)
</UL>
<P><STRONG><a name="[5e]"></a>UartPostRxSem</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, dev_uart.o(i.UartPostRxSem))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UartPostRxSem &rArr; Sem_post &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_post
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_uart.o(i.Dev_Uart_open)
</UL>
<P><STRONG><a name="[5f]"></a>UartPostTxSem</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, dev_uart.o(i.UartPostTxSem))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UartPostTxSem &rArr; Sem_post &rArr; osSemaphoreRelease &rArr; isrSemaphoreRelease &rArr; isr_sem_send &rArr; rt_psq_enq
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_post
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_uart.o(i.Dev_Uart_open)
</UL>
<P><STRONG><a name="[5c]"></a>UartWaitRxSem</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, dev_uart.o(i.UartWaitRxSem))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UartWaitRxSem &rArr; Sem_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_uart.o(i.Dev_Uart_open)
</UL>
<P><STRONG><a name="[5d]"></a>UartWaitTxSem</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, dev_uart.o(i.UartWaitTxSem))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UartWaitTxSem &rArr; Sem_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sem_wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_uart.o(i.Dev_Uart_open)
</UL>
<P><STRONG><a name="[63]"></a>Close_devSpi</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dev_spi.o(i.Close_devSpi))
<BR>[Address Reference Count : 1]<UL><LI> dev_spi.o(i.Dev_spi_ctor)
</UL>
<P><STRONG><a name="[66]"></a>Ioctol_devSpi</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, dev_spi.o(i.Ioctol_devSpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Ioctol_devSpi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_spi.o(i.Dev_spi_ctor)
</UL>
<P><STRONG><a name="[62]"></a>Open_devSpi</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, dev_spi.o(i.Open_devSpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Open_devSpi &rArr; Init_spi &rArr; SPI_I2S_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_spi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_spi.o(i.Dev_spi_ctor)
</UL>
<P><STRONG><a name="[64]"></a>Read_devSpi</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, dev_spi.o(i.Read_devSpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Read_devSpi &rArr; Read_spi &rArr; spi_read_word
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_spi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_spi.o(i.Dev_spi_ctor)
</UL>
<P><STRONG><a name="[67]"></a>Test_devSpi</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dev_spi.o(i.Test_devSpi))
<BR>[Address Reference Count : 1]<UL><LI> dev_spi.o(i.Dev_spi_ctor)
</UL>
<P><STRONG><a name="[65]"></a>Write_devSpi</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, dev_spi.o(i.Write_devSpi))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Write_devSpi &rArr; Write_spi &rArr; spi_write_word
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_spi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_spi.o(i.Dev_spi_ctor)
</UL>
<P><STRONG><a name="[51]"></a>Close_dev_IIC</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dev_iic.o(i.Close_dev_IIC))
<BR>[Address Reference Count : 1]<UL><LI> dev_iic.o(i.Dev_IIC_ctor)
</UL>
<P><STRONG><a name="[54]"></a>Ioctol_dev_IIC</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, dev_iic.o(i.Ioctol_dev_IIC))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Ioctol_dev_IIC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_iic.o(i.Dev_IIC_ctor)
</UL>
<P><STRONG><a name="[50]"></a>Open_dev_IIC</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, dev_iic.o(i.Open_dev_IIC))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Open_dev_IIC &rArr; Init_IIC &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_IIC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_iic.o(i.Dev_IIC_ctor)
</UL>
<P><STRONG><a name="[52]"></a>Read_dev_IIC</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, dev_iic.o(i.Read_dev_IIC))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = Read_dev_IIC &rArr; Read_IIC &rArr; Init_IIC &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_IIC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_iic.o(i.Dev_IIC_ctor)
</UL>
<P><STRONG><a name="[55]"></a>Test_dev_IIC</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dev_iic.o(i.Test_dev_IIC))
<BR>[Address Reference Count : 1]<UL><LI> dev_iic.o(i.Dev_IIC_ctor)
</UL>
<P><STRONG><a name="[53]"></a>Write_dev_IIC</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, dev_iic.o(i.Write_dev_IIC))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Write_dev_IIC &rArr; Write_IIC &rArr; I2C_wait_EV &rArr; I2C_CheckEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_IIC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_iic.o(i.Dev_IIC_ctor)
</UL>
<P><STRONG><a name="[85]"></a>DevGpioClose</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, device_gpio.o(i.DevGpioClose))
<BR>[Address Reference Count : 1]<UL><LI> device_gpio.o(i.devGpio_ctor)
</UL>
<P><STRONG><a name="[88]"></a>DevGpioIoctol</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, device_gpio.o(i.DevGpioIoctol))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DevGpioIoctol
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_gpio.o(i.devGpio_ctor)
</UL>
<P><STRONG><a name="[84]"></a>DevGpioOpen</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, device_gpio.o(i.DevGpioOpen))
<BR>[Address Reference Count : 1]<UL><LI> device_gpio.o(i.devGpio_ctor)
</UL>
<P><STRONG><a name="[86]"></a>DevGpioRead</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, device_gpio.o(i.DevGpioRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DevGpioRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_gpio.o(i.devGpio_ctor)
</UL>
<P><STRONG><a name="[89]"></a>DevGpioTest</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, device_gpio.o(i.DevGpioTest))
<BR>[Address Reference Count : 1]<UL><LI> device_gpio.o(i.devGpio_ctor)
</UL>
<P><STRONG><a name="[87]"></a>DevGpioWrite</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, device_gpio.o(i.DevGpioWrite))
<BR>[Address Reference Count : 1]<UL><LI> device_gpio.o(i.devGpio_ctor)
</UL>
<P><STRONG><a name="[107]"></a>FM_Cal_bit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, dev_lcd_fm12864.o(i.FM_Cal_bit))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Draw_line
</UL>

<P><STRONG><a name="[9f]"></a>FM_Clear</STRONG> (Thumb, 208 bytes, Stack size 80 bytes, dev_lcd_fm12864.o(i.FM_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = FM_Clear &rArr; LHI_Write_vram &rArr; LHI_Wait &rArr; LHI_Read_status &rArr; LHI_Set_parallel_direction &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHI_Write_vram
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHI_Send_cmd
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Init_change_area
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_lcd_fm12864.o(i.lcd_fm12864_ctor)
</UL>
<P><STRONG><a name="[106]"></a>FM_Coordinate_converter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dev_lcd_fm12864.o(i.FM_Coordinate_converter))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Text
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Draw_geometry
</UL>

<P><STRONG><a name="[6a]"></a>FM_Draw_cycle</STRONG> (Thumb, 8 bytes, Stack size 12 bytes, dev_lcd_fm12864.o(i.FM_Draw_cycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FM_Draw_cycle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_lcd_fm12864.o(i.FM_Init)
</UL>
<P><STRONG><a name="[a5]"></a>FM_Draw_geometry</STRONG> (Thumb, 122 bytes, Stack size 56 bytes, dev_lcd_fm12864.o(i.FM_Draw_geometry))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FM_Draw_geometry
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Coordinate_converter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_lcd_fm12864.o(i.lcd_fm12864_ctor)
</UL>
<P><STRONG><a name="[68]"></a>FM_Draw_line</STRONG> (Thumb, 398 bytes, Stack size 64 bytes, dev_lcd_fm12864.o(i.FM_Draw_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FM_Draw_line
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Update_change_area
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Cal_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Draw_rectangle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_lcd_fm12864.o(i.FM_Init)
</UL>
<P><STRONG><a name="[69]"></a>FM_Draw_rectangle</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, dev_lcd_fm12864.o(i.FM_Draw_rectangle))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = FM_Draw_rectangle &rArr; FM_Draw_line
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Draw_line
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_lcd_fm12864.o(i.FM_Init)
</UL>
<P><STRONG><a name="[a2]"></a>FM_Flush</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, dev_lcd_fm12864.o(i.FM_Flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = FM_Flush &rArr; FM_Set_vxy &rArr; LHI_Wait &rArr; LHI_Read_status &rArr; LHI_Set_parallel_direction &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHI_Write_vram
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Set_vxy
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Init_change_area
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_lcd_fm12864.o(i.lcd_fm12864_ctor)
</UL>
<P><STRONG><a name="[9e]"></a>FM_Init</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, dev_lcd_fm12864.o(i.FM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FM_Init &rArr; LHI_Send_cmd &rArr; LHI_TX_byte &rArr; LHI_Set_parallel_direction &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHI_Send_cmd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHI_Reset_lcd
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHI_Init_pwm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_lcd_fm12864.o(i.lcd_fm12864_ctor)
</UL>
<P><STRONG><a name="[105]"></a>FM_Init_change_area</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dev_lcd_fm12864.o(i.FM_Init_change_area))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Flush
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Clear
</UL>

<P><STRONG><a name="[a4]"></a>FM_Lcd_ctl</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, dev_lcd_fm12864.o(i.FM_Lcd_ctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FM_Lcd_ctl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_lcd_fm12864.o(i.lcd_fm12864_ctor)
</UL>
<P><STRONG><a name="[a3]"></a>FM_Lightness</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, dev_lcd_fm12864.o(i.FM_Lightness))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FM_Lightness &rArr; LHI_Set_pwm_duty
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHI_Set_pwm_duty
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_lcd_fm12864.o(i.lcd_fm12864_ctor)
</UL>
<P><STRONG><a name="[109]"></a>FM_Set_vxy</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, dev_lcd_fm12864.o(i.FM_Set_vxy))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = FM_Set_vxy &rArr; LHI_Wait &rArr; LHI_Read_status &rArr; LHI_Set_parallel_direction &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHI_Wait
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHI_Send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Flush
</UL>

<P><STRONG><a name="[a0]"></a>FM_Switch</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dev_lcd_fm12864.o(i.FM_Switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FM_Switch
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_lcd_fm12864.o(i.lcd_fm12864_ctor)
</UL>
<P><STRONG><a name="[a1]"></a>FM_Text</STRONG> (Thumb, 168 bytes, Stack size 80 bytes, dev_lcd_fm12864.o(i.FM_Text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = FM_Text &rArr; CHD_Get_code
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHD_Get_code
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Update_change_area
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Coordinate_converter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_lcd_fm12864.o(i.lcd_fm12864_ctor)
</UL>
<P><STRONG><a name="[108]"></a>FM_Update_change_area</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, dev_lcd_fm12864.o(i.FM_Update_change_area))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Text
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FM_Draw_line
</UL>

<P><STRONG><a name="[138]"></a>LHI_Lcd_E_edge</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lcd_hardware_interfaces.o(i.LHI_Lcd_E_edge))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LHI_Lcd_E_edge
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHI_Write_vram
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHI_Send_cmd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHI_Reset_lcd
</UL>

<P><STRONG><a name="[136]"></a>LHI_Pulse</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lcd_hardware_interfaces.o(i.LHI_Pulse))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHI_Set_pwm_duty
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHI_Init_pwm
</UL>

<P><STRONG><a name="[139]"></a>LHI_RX_byte</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lcd_hardware_interfaces.o(i.LHI_RX_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LHI_RX_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputData
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHI_Read_status
</UL>

<P><STRONG><a name="[13c]"></a>LHI_Set_parallel_direction</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lcd_hardware_interfaces.o(i.LHI_Set_parallel_direction))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LHI_Set_parallel_direction &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHI_Read_status
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHI_TX_byte
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHI_Send_cmd
</UL>

<P><STRONG><a name="[13d]"></a>LHI_TX_byte</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lcd_hardware_interfaces.o(i.LHI_TX_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LHI_TX_byte &rArr; LHI_Set_parallel_direction &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Write
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutputData
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHI_Set_parallel_direction
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHI_Write_vram
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LHI_Send_cmd
</UL>

<P><STRONG><a name="[18a]"></a>STG_Acc_chn_alarm</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, storage.o(i.STG_Acc_chn_alarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = STG_Acc_chn_alarm &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Open_file
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strg_rd_stored_data
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strg_WR_stored_data
</UL>

<P><STRONG><a name="[18b]"></a>STG_Acc_chn_conf</STRONG> (Thumb, 150 bytes, Stack size 64 bytes, storage.o(i.STG_Acc_chn_conf))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = STG_Acc_chn_conf &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_save_data
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strg_Updata_rcd_mgr
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Open_file
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strg_rd_stored_data
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strg_WR_stored_data
</UL>

<P><STRONG><a name="[18d]"></a>STG_Acc_chn_data</STRONG> (Thumb, 200 bytes, Stack size 56 bytes, storage.o(i.STG_Acc_chn_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = STG_Acc_chn_data &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_storage
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_time_sec
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Open_file
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strg_rd_stored_data
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strg_WR_stored_data
</UL>

<P><STRONG><a name="[18e]"></a>STG_Acc_chn_sum</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, storage.o(i.STG_Acc_chn_sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = STG_Acc_chn_sum &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Open_file
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strg_rd_stored_data
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strg_WR_stored_data
</UL>

<P><STRONG><a name="[18f]"></a>STG_Acc_lose_pwr</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, storage.o(i.STG_Acc_lose_pwr))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = STG_Acc_lose_pwr &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Open_file
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strg_rd_stored_data
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strg_WR_stored_data
</UL>

<P><STRONG><a name="[190]"></a>STG_Acc_sys_conf</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, storage.o(i.STG_Acc_sys_conf))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = STG_Acc_sys_conf &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Open_file
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strg_rd_stored_data
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strg_WR_stored_data
</UL>

<P><STRONG><a name="[80]"></a>STG_Open_file</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, storage.o(i.STG_Open_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_storage
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strg_Updata_rcd_mgr
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Set_file_position
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Resize
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Strg_Updata_rcd_mgr
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Acc_sys_conf
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Acc_lose_pwr
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Acc_chn_sum
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Acc_chn_data
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Acc_chn_conf
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Acc_chn_alarm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> storage.o(i.Storage_ctor)
</UL>
<P><STRONG><a name="[18c]"></a>Strg_Updata_rcd_mgr</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, storage.o(i.Strg_Updata_rcd_mgr))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + In Cycle
<LI>Call Chain = Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_storage
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Open_file
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Open_file
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Acc_chn_conf
</UL>

<P><STRONG><a name="[7f]"></a>Strg_WR_stored_data</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, storage.o(i.Strg_WR_stored_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Strg_WR_stored_data &rArr; STG_Acc_chn_conf &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Acc_sys_conf
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Acc_lose_pwr
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Acc_chn_sum
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Acc_chn_data
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Acc_chn_conf
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Acc_chn_alarm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> storage.o(i.Storage_ctor)
</UL>
<P><STRONG><a name="[7d]"></a>Strg_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, storage.o(i.Strg_init))
<BR>[Address Reference Count : 1]<UL><LI> storage.o(i.Storage_ctor)
</UL>
<P><STRONG><a name="[7e]"></a>Strg_rd_stored_data</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, storage.o(i.Strg_rd_stored_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Strg_rd_stored_data &rArr; STG_Acc_chn_conf &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Acc_sys_conf
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Acc_lose_pwr
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Acc_chn_sum
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Acc_chn_data
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Acc_chn_conf
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Acc_chn_alarm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> storage.o(i.Storage_ctor)
</UL>
<P><STRONG><a name="[6c]"></a>DoUpdate</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, model.o(i.DoUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DoUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> model.o(i.Mdl_notify)
</UL>
<P><STRONG><a name="[15d]"></a>Cut_small_signal</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, model_channel.o(i.Cut_small_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Cut_small_signal
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_run
</UL>

<P><STRONG><a name="[144]"></a>MdlChn_Cancle_alarm</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, model_channel.o(i.MdlChn_Cancle_alarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = MdlChn_Cancle_alarm &rArr; STG_Set_file_position &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Set_file_position
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_storage
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_time_sec
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_Alarm
</UL>

<P><STRONG><a name="[147]"></a>MdlChn_Check_new_alarm</STRONG> (Thumb, 292 bytes, Stack size 48 bytes, model_channel.o(i.MdlChn_Check_new_alarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = MdlChn_Check_new_alarm &rArr; STG_Set_file_position &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Set_file_position
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_storage
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_time_sec
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_Alarm
</UL>

<P><STRONG><a name="[14d]"></a>MdlChn_Get_def_lower_limit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, model_channel.o(i.MdlChn_Get_def_lower_limit))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_default_conf
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_setData
</UL>

<P><STRONG><a name="[14e]"></a>MdlChn_Get_def_up_limit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, model_channel.o(i.MdlChn_Get_def_up_limit))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_default_conf
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_setData
</UL>

<P><STRONG><a name="[14a]"></a>MdlChn_Init_alm_mgr_by_STG_alm</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, model_channel.o(i.MdlChn_Init_alm_mgr_by_STG_alm))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = MdlChn_Init_alm_mgr_by_STG_alm &rArr; STG_Set_file_position &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STG_Set_file_position
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_storage
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_init
</UL>

<P><STRONG><a name="[156]"></a>MdlChn_Save_2_alarm</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, model_channel.o(i.MdlChn_Save_2_alarm))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_save_data
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_init
</UL>

<P><STRONG><a name="[155]"></a>MdlChn_Save_2_conf</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, model_channel.o(i.MdlChn_Save_2_conf))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_save_data
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_init
</UL>

<P><STRONG><a name="[70]"></a>MdlChn_getData</STRONG> (Thumb, 556 bytes, Stack size 80 bytes, model_channel.o(i.MdlChn_getData))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = MdlChn_getData &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_rd_signal_type
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_decode
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Read_DO
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_RD_low_limit
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_RD_hig_limit
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> model_channel.o(i.Model_chn_ctor)
</UL>
<P><STRONG><a name="[6d]"></a>MdlChn_init</STRONG> (Thumb, 260 bytes, Stack size 64 bytes, model_channel.o(i.MdlChn_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = MdlChn_init &rArr; MdlChn_Init_alm_mgr_by_STG_alm &rArr; STG_Set_file_position &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_calloc
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_storage
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_open
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_default_conf
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_default_alarm
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_Commit_conf
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_Save_2_conf
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_Save_2_alarm
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_Init_alm_mgr_by_STG_alm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> model_channel.o(i.Model_chn_ctor)
</UL>
<P><STRONG><a name="[74]"></a>MdlChn_modify_sconf</STRONG> (Thumb, 862 bytes, Stack size 40 bytes, model_channel.o(i.MdlChn_modify_sconf))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MdlChn_modify_sconf &rArr; Print_float &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Operate_in_tange
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_touch_spot
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_float
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> model_channel.o(i.Model_chn_ctor)
</UL>
<P><STRONG><a name="[6e]"></a>MdlChn_run</STRONG> (Thumb, 382 bytes, Stack size 48 bytes, model_channel.o(i.MdlChn_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = MdlChn_run &rArr; Signal_Alarm &rArr; MdlChn_Check_new_alarm &rArr; STG_Set_file_position &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_decode
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_AI_Read
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_storage
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_open
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cut_small_signal
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zero_shift_K_B
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_Alarm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> model_channel.o(i.Model_chn_ctor)
</UL>
<P><STRONG><a name="[6f]"></a>MdlChn_self_check</STRONG> (Thumb, 212 bytes, Stack size 64 bytes, model_channel.o(i.MdlChn_self_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = MdlChn_self_check &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_decode
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_Query
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_open
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> model_channel.o(i.Model_chn_ctor)
</UL>
<P><STRONG><a name="[71]"></a>MdlChn_setData</STRONG> (Thumb, 722 bytes, Stack size 88 bytes, model_channel.o(i.MdlChn_setData))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = MdlChn_setData &rArr; Dev_open &rArr; DevChar_open &rArr; Get_Dev_IIC &rArr; Dev_IIC_new &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_decode
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_WR_low_limit
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_WR_hig_limit
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_DO_output
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmBus_AI_config
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_open
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_Get_def_up_limit
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_Get_def_lower_limit
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> model_channel.o(i.Model_chn_ctor)
</UL>
<P><STRONG><a name="[75]"></a>MdlChn_set_by_string</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, model_channel.o(i.MdlChn_set_by_string))
<BR>[Address Reference Count : 1]<UL><LI> model_channel.o(i.Model_chn_ctor)
</UL>
<P><STRONG><a name="[73]"></a>MdlChn_to_percentage</STRONG> (Thumb, 26 bytes, Stack size 20 bytes, model_channel.o(i.MdlChn_to_percentage))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MdlChn_to_percentage &rArr; MdlChn_Cal_prc
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_Cal_prc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> model_channel.o(i.Model_chn_ctor)
</UL>
<P><STRONG><a name="[72]"></a>MdlChn_to_string</STRONG> (Thumb, 478 bytes, Stack size 24 bytes, model_channel.o(i.MdlChn_to_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MdlChn_to_string &rArr; Print_float &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_unit
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_touch_spot
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_singnaltype
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_float
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> model_channel.o(i.Model_chn_ctor)
</UL>
<P><STRONG><a name="[199]"></a>Percent_to_data</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, model_channel.o(i.Percent_to_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Percent_to_data
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Signal_Alarm
</UL>

<P><STRONG><a name="[15e]"></a>Signal_Alarm</STRONG> (Thumb, 364 bytes, Stack size 48 bytes, model_channel.o(i.Signal_Alarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Signal_Alarm &rArr; MdlChn_Check_new_alarm &rArr; STG_Set_file_position &rArr; STG_Open_file &rArr; Strg_Updata_rcd_mgr &rArr;  STG_Open_file (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Percent_to_data
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_Check_new_alarm
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_Cancle_alarm
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_run
</UL>

<P><STRONG><a name="[15c]"></a>Zero_shift_K_B</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, model_channel.o(i.Zero_shift_K_B))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Zero_shift_K_B
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MdlChn_run
</UL>

<P><STRONG><a name="[d1]"></a>CH376DiskReqSense</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ch376.o(i.CH376DiskReqSense))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CH376DiskReqSense &rArr; CH376SendCmdWaitInt &rArr; Wait376Interrupt &rArr; CH376GetIntStatus &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376SendCmdWaitInt
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDiskWriteProtect
</UL>

<P><STRONG><a name="[d3]"></a>CH376GetIntStatus</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ch376.o(i.CH376GetIntStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CH376GetIntStatus &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH376Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Ch376
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376DiskConnect
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait376Interrupt
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376_intr
</UL>

<P><STRONG><a name="[d5]"></a>CH376ReadVar8</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ch376.o(i.CH376ReadVar8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CH376ReadVar8 &rArr; xWriteCH376Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH376Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDiskWriteProtect
</UL>

<P><STRONG><a name="[cd]"></a>CH376SendCmdWaitInt</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ch376.o(i.CH376SendCmdWaitInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CH376SendCmdWaitInt &rArr; Wait376Interrupt &rArr; CH376GetIntStatus &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376_enbale_Irq
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH376Cmd
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait376Interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDiskWriteProtect
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376DiskConnect
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376DiskQuery
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376DiskMount
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376DiskReqSense
</UL>

<P><STRONG><a name="[d8]"></a>CH376WriteHostBlock</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ch376.o(i.CH376WriteHostBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CH376WriteHostBlock &rArr; xWriteCH376Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xWriteCH376Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDiskWriteProtect
</UL>

<P><STRONG><a name="[6b]"></a>Ch376_intr</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, ch376.o(i.Ch376_intr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Ch376_intr &rArr; CH376GetIntStatus &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376GetIntStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ch376.o(i.Init_Ch376)
</UL>
<P><STRONG><a name="[1bf]"></a>Query376Interrupt</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ch376.o(i.Query376Interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Query376Interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait376Interrupt
</UL>

<P><STRONG><a name="[d7]"></a>Wait376Interrupt</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ch376.o(i.Wait376Interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Wait376Interrupt &rArr; CH376GetIntStatus &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376_enbale_Irq
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Query376Interrupt
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376GetIntStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376SendCmdWaitInt
</UL>

<P><STRONG><a name="[cf]"></a>xWriteCH376Cmd</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ch376.o(i.xWriteCH376Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xWriteCH376Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mInitCH376Host
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376ReadBlock
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376DiskQuery
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376WriteHostBlock
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376SendCmdWaitInt
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376ReadVar8
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376GetIntStatus
</UL>

<P><STRONG><a name="[81]"></a>Deal_status</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, usb.o(i.Deal_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Deal_status &rArr; CQ_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CQ_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb.o(i.USB_Init)
</UL>
<P><STRONG><a name="[187]"></a>Reset_Ch376</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usb.o(i.Reset_Ch376))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Reset_Ch376 &rArr; mInitCH376Host &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mInitCH376Host
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HRst_Ch376
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usb_deal_fail
</UL>

<P><STRONG><a name="[4]"></a>Usb_deal_fail</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usb.o(i.Usb_deal_fail))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Usb_deal_fail &rArr; Reset_Ch376 &rArr; mInitCH376Host &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Ch376
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>Usb_deal_identify</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, usb.o(i.Usb_deal_identify))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Usb_deal_identify &rArr; CH376DiskQuery &rArr; CH376SendCmdWaitInt &rArr; Wait376Interrupt &rArr; CH376GetIntStatus &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CQ_Write
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsDiskWriteProtect
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376_enbale_Irq
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376DiskQuery
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>Usb_deal_insert</STRONG> (Thumb, 164 bytes, Stack size 64 bytes, usb.o(i.Usb_deal_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Usb_deal_insert &rArr; Ch376DiskConnect &rArr; CH376SendCmdWaitInt &rArr; Wait376Interrupt &rArr; CH376GetIntStatus &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CQ_Write
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376_enbale_Irq
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ch376DiskConnect
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376ReadBlock
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH376DiskMount
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>Usb_deal_remove</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usb.o(i.Usb_deal_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Usb_deal_remove &rArr; CQ_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CQ_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb.o(.data)
</UL>
<P><STRONG><a name="[197]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[198]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[1d3]"></a>rt_id2obj</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_cmsis.o(i.rt_id2obj))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerCall
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreWait
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreRelease
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrSemaphoreRelease
</UL>

<P><STRONG><a name="[202]"></a>rt_ms2tick</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, rt_cmsis.o(i.rt_ms2tick))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreWait
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageGet
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcDelay
</UL>

<P><STRONG><a name="[20a]"></a>rt_tid2ptcb</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_cmsis.o(i.rt_tid2ptcb))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadTerminate
</UL>

<P><STRONG><a name="[20b]"></a>rt_timer_insert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, rt_cmsis.o(i.rt_timer_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_timer_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
</UL>

<P><STRONG><a name="[1e9]"></a>rt_init_context</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, rt_task.o(i.rt_init_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_stack
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[1c4]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0fprintf$8
</UL>

<P><STRONG><a name="[1c8]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1c7]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[83]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf8.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0sprintf$8)
</UL>
<P><STRONG><a name="[1c6]"></a>internal_alloc</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, mallocr.o(i.internal_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
